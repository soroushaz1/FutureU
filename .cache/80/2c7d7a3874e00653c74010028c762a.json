{"id":"node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrHelperFunctions.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\pbrHelperFunctions.js.map","includedInParent":true,"mtime":1704105649776},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\pbrHelperFunctions.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pbrHelperFunctions = void 0;\nvar _shaderStore = require(\"../../Engines/shaderStore.js\");\n// Do not edit.\n\nconst name = \"pbrHelperFunctions\";\nconst shader = `#define RECIPROCAL_PI2 0.15915494\n#define RECIPROCAL_PI 0.31830988618\n#define MINIMUMVARIANCE 0.0005\nfloat convertRoughnessToAverageSlope(float roughness)\n{\nreturn square(roughness)+MINIMUMVARIANCE;\n}\nfloat fresnelGrazingReflectance(float reflectance0) {\nfloat reflectance90=saturate(reflectance0*25.0);\nreturn reflectance90;\n}\nvec2 getAARoughnessFactors(vec3 normalVector) {\n#ifdef SPECULARAA\nvec3 nDfdx=dFdx(normalVector.xyz);\nvec3 nDfdy=dFdy(normalVector.xyz);\nfloat slopeSquare=max(dot(nDfdx,nDfdx),dot(nDfdy,nDfdy));\nfloat geometricRoughnessFactor=pow(saturate(slopeSquare),0.333);\nfloat geometricAlphaGFactor=sqrt(slopeSquare);\ngeometricAlphaGFactor*=0.75;\nreturn vec2(geometricRoughnessFactor,geometricAlphaGFactor);\n#else\nreturn vec2(0.);\n#endif\n}\n#ifdef ANISOTROPIC\nvec2 getAnisotropicRoughness(float alphaG,float anisotropy) {\nfloat alphaT=max(alphaG*(1.0+anisotropy),MINIMUMVARIANCE);\nfloat alphaB=max(alphaG*(1.0-anisotropy),MINIMUMVARIANCE);\nreturn vec2(alphaT,alphaB);\n}\nvec3 getAnisotropicBentNormals(const vec3 T,const vec3 B,const vec3 N,const vec3 V,float anisotropy) {\nvec3 anisotropicFrameDirection=anisotropy>=0.0 ? B : T;\nvec3 anisotropicFrameTangent=cross(normalize(anisotropicFrameDirection),V);\nvec3 anisotropicFrameNormal=cross(anisotropicFrameTangent,anisotropicFrameDirection);\nvec3 anisotropicNormal=normalize(mix(N,anisotropicFrameNormal,abs(anisotropy)));\nreturn anisotropicNormal;\n}\n#endif\n#if defined(CLEARCOAT) || defined(SS_REFRACTION)\nvec3 cocaLambert(vec3 alpha,float distance) {\nreturn exp(-alpha*distance);\n}\nvec3 cocaLambert(float NdotVRefract,float NdotLRefract,vec3 alpha,float thickness) {\nreturn cocaLambert(alpha,(thickness*((NdotLRefract+NdotVRefract)/(NdotLRefract*NdotVRefract))));\n}\nvec3 computeColorAtDistanceInMedia(vec3 color,float distance) {\nreturn -log(color)/distance;\n}\nvec3 computeClearCoatAbsorption(float NdotVRefract,float NdotLRefract,vec3 clearCoatColor,float clearCoatThickness,float clearCoatIntensity) {\nvec3 clearCoatAbsorption=mix(vec3(1.0),\ncocaLambert(NdotVRefract,NdotLRefract,clearCoatColor,clearCoatThickness),\nclearCoatIntensity);\nreturn clearCoatAbsorption;\n}\n#endif\n#ifdef MICROSURFACEAUTOMATIC\nfloat computeDefaultMicroSurface(float microSurface,vec3 reflectivityColor)\n{\nconst float kReflectivityNoAlphaWorkflow_SmoothnessMax=0.95;\nfloat reflectivityLuminance=getLuminance(reflectivityColor);\nfloat reflectivityLuma=sqrt(reflectivityLuminance);\nmicroSurface=reflectivityLuma*kReflectivityNoAlphaWorkflow_SmoothnessMax;\nreturn microSurface;\n}\n#endif\n`;\n// Sideeffect\n_shaderStore.ShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nconst pbrHelperFunctions = exports.pbrHelperFunctions = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":10,"column":13}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":33},"generated":{"line":10,"column":33}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":11,"column":15}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":76,"column":1}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":71,"column":0},"generated":{"line":77,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":72,"column":0},"generated":{"line":78,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":72,"column":11},"generated":{"line":78,"column":24}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":72,"column":12},"generated":{"line":78,"column":25}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":72,"column":32},"generated":{"line":78,"column":45}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":72,"column":33},"generated":{"line":78,"column":46}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":72,"column":37},"generated":{"line":78,"column":50}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":72,"column":38},"generated":{"line":78,"column":51}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":72,"column":41},"generated":{"line":78,"column":54}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":72,"column":47},"generated":{"line":78,"column":60}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":79,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":7},"generated":{"line":80,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":13},"generated":{"line":80,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":31},"generated":{"line":80,"column":24}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":31},"generated":{"line":80,"column":27}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":31},"generated":{"line":80,"column":34}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":31},"generated":{"line":80,"column":35}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":31},"generated":{"line":80,"column":53}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":34},"generated":{"line":80,"column":56}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":36},"generated":{"line":81,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":40},"generated":{"line":81,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":42},"generated":{"line":82,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":48},"generated":{"line":83,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":74,"column":50},"generated":{"line":83,"column":1}}],"sources":{"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrHelperFunctions.ts":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"pbrHelperFunctions\";\nconst shader = `#define RECIPROCAL_PI2 0.15915494\n#define RECIPROCAL_PI 0.31830988618\n#define MINIMUMVARIANCE 0.0005\nfloat convertRoughnessToAverageSlope(float roughness)\r{\rreturn square(roughness)+MINIMUMVARIANCE;\r}\rfloat fresnelGrazingReflectance(float reflectance0) {\rfloat reflectance90=saturate(reflectance0*25.0);\rreturn reflectance90;\r}\rvec2 getAARoughnessFactors(vec3 normalVector) {\r#ifdef SPECULARAA\nvec3 nDfdx=dFdx(normalVector.xyz);\rvec3 nDfdy=dFdy(normalVector.xyz);\rfloat slopeSquare=max(dot(nDfdx,nDfdx),dot(nDfdy,nDfdy));\rfloat geometricRoughnessFactor=pow(saturate(slopeSquare),0.333);\rfloat geometricAlphaGFactor=sqrt(slopeSquare);\rgeometricAlphaGFactor*=0.75;\rreturn vec2(geometricRoughnessFactor,geometricAlphaGFactor);\r#else\nreturn vec2(0.);\r#endif\n}\r#ifdef ANISOTROPIC\nvec2 getAnisotropicRoughness(float alphaG,float anisotropy) {\rfloat alphaT=max(alphaG*(1.0+anisotropy),MINIMUMVARIANCE);\rfloat alphaB=max(alphaG*(1.0-anisotropy),MINIMUMVARIANCE);\rreturn vec2(alphaT,alphaB);\r}\rvec3 getAnisotropicBentNormals(const vec3 T,const vec3 B,const vec3 N,const vec3 V,float anisotropy) {\rvec3 anisotropicFrameDirection=anisotropy>=0.0 ? B : T;\rvec3 anisotropicFrameTangent=cross(normalize(anisotropicFrameDirection),V);\rvec3 anisotropicFrameNormal=cross(anisotropicFrameTangent,anisotropicFrameDirection);\rvec3 anisotropicNormal=normalize(mix(N,anisotropicFrameNormal,abs(anisotropy)));\rreturn anisotropicNormal;\r}\r#endif\n#if defined(CLEARCOAT) || defined(SS_REFRACTION)\nvec3 cocaLambert(vec3 alpha,float distance) {\rreturn exp(-alpha*distance);\r}\rvec3 cocaLambert(float NdotVRefract,float NdotLRefract,vec3 alpha,float thickness) {\rreturn cocaLambert(alpha,(thickness*((NdotLRefract+NdotVRefract)/(NdotLRefract*NdotVRefract))));\r}\rvec3 computeColorAtDistanceInMedia(vec3 color,float distance) {\rreturn -log(color)/distance;\r}\rvec3 computeClearCoatAbsorption(float NdotVRefract,float NdotLRefract,vec3 clearCoatColor,float clearCoatThickness,float clearCoatIntensity) {\rvec3 clearCoatAbsorption=mix(vec3(1.0),\rcocaLambert(NdotVRefract,NdotLRefract,clearCoatColor,clearCoatThickness),\rclearCoatIntensity);\rreturn clearCoatAbsorption;\r}\r#endif\n#ifdef MICROSURFACEAUTOMATIC\nfloat computeDefaultMicroSurface(float microSurface,vec3 reflectivityColor)\r{\rconst float kReflectivityNoAlphaWorkflow_SmoothnessMax=0.95;\rfloat reflectivityLuminance=getLuminance(reflectivityColor);\rfloat reflectivityLuma=sqrt(reflectivityLuminance);\rmicroSurface=reflectivityLuma*kReflectivityNoAlphaWorkflow_SmoothnessMax;\rreturn microSurface;\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const pbrHelperFunctions = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"e4861a4e3a776fdb7954be6807538f7b","cacheData":{"env":{}}}