{"id":"node_modules/@babylonjs/core/Shaders/ssao.fragment.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ssao.fragment.js.map","includedInParent":true,"mtime":1704105649964},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ssao.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ssaoPixelShader = void 0;\nvar _shaderStore = require(\"../Engines/shaderStore.js\");\n// Do not edit.\n\nconst name = \"ssaoPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\nvarying vec2 vUV;\n#ifdef SSAO\nuniform sampler2D randomSampler;\nuniform float randTextureTiles;\nuniform float samplesFactor;\nuniform vec3 sampleSphere[SAMPLES];\nuniform float totalStrength;\nuniform float radius;\nuniform float area;\nuniform float fallOff;\nuniform float base;\nvec3 normalFromDepth(float depth,vec2 coords)\n{\nvec2 offset1=vec2(0.0,radius);\nvec2 offset2=vec2(radius,0.0);\nfloat depth1=texture2D(textureSampler,coords+offset1).r;\nfloat depth2=texture2D(textureSampler,coords+offset2).r;\nvec3 p1=vec3(offset1,depth1-depth);\nvec3 p2=vec3(offset2,depth2-depth);\nvec3 normal=cross(p1,p2);\nnormal.z=-normal.z;\nreturn normalize(normal);\n}\nvoid main()\n{\nvec3 random=normalize(texture2D(randomSampler,vUV*randTextureTiles).rgb);\nfloat depth=texture2D(textureSampler,vUV).r;\nvec3 position=vec3(vUV,depth);\nvec3 normal=normalFromDepth(depth,vUV);\nfloat radiusDepth=radius/depth;\nfloat occlusion=0.0;\nvec3 ray;\nvec3 hemiRay;\nfloat occlusionDepth;\nfloat difference;\nfor (int i=0; i<SAMPLES; i++)\n{\nray=radiusDepth*reflect(sampleSphere[i],random);\nhemiRay=position+sign(dot(ray,normal))*ray;\nocclusionDepth=texture2D(textureSampler,clamp(hemiRay.xy,vec2(0.001,0.001),vec2(0.999,0.999))).r;\ndifference=depth-occlusionDepth;\nocclusion+=step(fallOff,difference)*(1.0-smoothstep(fallOff,area,difference));\n}\nfloat ao=1.0-totalStrength*occlusion*samplesFactor;\nfloat result=clamp(ao+base,0.0,1.0);\ngl_FragColor.r=result;\ngl_FragColor.g=result;\ngl_FragColor.b=result;\ngl_FragColor.a=1.0;\n}\n#endif\n`;\n// Sideeffect\n_shaderStore.ShaderStore.ShadersStore[name] = shader;\n/** @internal */\nconst ssaoPixelShader = exports.ssaoPixelShader = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":10,"column":13}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":4,"column":30},"generated":{"line":10,"column":30}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":11,"column":15}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":63,"column":1}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":58,"column":0},"generated":{"line":64,"column":0}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":65,"column":0}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":59,"column":11},"generated":{"line":65,"column":24}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":59,"column":12},"generated":{"line":65,"column":25}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":59,"column":24},"generated":{"line":65,"column":37}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":59,"column":25},"generated":{"line":65,"column":38}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":59,"column":29},"generated":{"line":65,"column":42}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":59,"column":30},"generated":{"line":65,"column":43}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":59,"column":33},"generated":{"line":65,"column":46}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":59,"column":39},"generated":{"line":65,"column":52}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":60,"column":0},"generated":{"line":66,"column":0}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":7},"generated":{"line":67,"column":0}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":13},"generated":{"line":67,"column":6}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":28},"generated":{"line":67,"column":21}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":28},"generated":{"line":67,"column":24}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":28},"generated":{"line":67,"column":31}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":28},"generated":{"line":67,"column":32}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":28},"generated":{"line":67,"column":47}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":31},"generated":{"line":67,"column":50}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":33},"generated":{"line":68,"column":2}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":37},"generated":{"line":68,"column":6}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":39},"generated":{"line":69,"column":2}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":45},"generated":{"line":70,"column":0}},{"source":"../../../../lts/core/generated/Shaders/ssao.fragment.ts","name":null,"original":{"line":61,"column":47},"generated":{"line":70,"column":1}}],"sources":{"../../../../lts/core/generated/Shaders/ssao.fragment.ts":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"ssaoPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\rvarying vec2 vUV;\r#ifdef SSAO\nuniform sampler2D randomSampler;\runiform float randTextureTiles;\runiform float samplesFactor;\runiform vec3 sampleSphere[SAMPLES];\runiform float totalStrength;\runiform float radius;\runiform float area;\runiform float fallOff;\runiform float base;\rvec3 normalFromDepth(float depth,vec2 coords)\r{\rvec2 offset1=vec2(0.0,radius);\rvec2 offset2=vec2(radius,0.0);\rfloat depth1=texture2D(textureSampler,coords+offset1).r;\rfloat depth2=texture2D(textureSampler,coords+offset2).r;\rvec3 p1=vec3(offset1,depth1-depth);\rvec3 p2=vec3(offset2,depth2-depth);\rvec3 normal=cross(p1,p2);\rnormal.z=-normal.z;\rreturn normalize(normal);\r}\rvoid main()\r{\rvec3 random=normalize(texture2D(randomSampler,vUV*randTextureTiles).rgb);\rfloat depth=texture2D(textureSampler,vUV).r;\rvec3 position=vec3(vUV,depth);\rvec3 normal=normalFromDepth(depth,vUV);\rfloat radiusDepth=radius/depth;\rfloat occlusion=0.0;\rvec3 ray;\rvec3 hemiRay;\rfloat occlusionDepth;\rfloat difference;\rfor (int i=0; i<SAMPLES; i++)\r{\rray=radiusDepth*reflect(sampleSphere[i],random);\rhemiRay=position+sign(dot(ray,normal))*ray;\rocclusionDepth=texture2D(textureSampler,clamp(hemiRay.xy,vec2(0.001,0.001),vec2(0.999,0.999))).r;\rdifference=depth-occlusionDepth;\rocclusion+=step(fallOff,difference)*(1.0-smoothstep(fallOff,area,difference));\r}\rfloat ao=1.0-totalStrength*occlusion*samplesFactor;\rfloat result=clamp(ao+base,0.0,1.0);\rgl_FragColor.r=result;\rgl_FragColor.g=result;\rgl_FragColor.b=result;\rgl_FragColor.a=1.0;\r}\r#endif\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const ssaoPixelShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"c35fb9acd33c5cfa6285e758c6fba28e","cacheData":{"env":{}}}