{"id":"node_modules/@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\lightsFragmentFunctions.js.map","includedInParent":true,"mtime":1704105649601},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\lightsFragmentFunctions.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lightsFragmentFunctions = void 0;\nvar _shaderStore = require(\"../../Engines/shaderStore.js\");\n// Do not edit.\n\nconst name = \"lightsFragmentFunctions\";\nconst shader = `struct lightingInfo\n{\nvec3 diffuse;\n#ifdef SPECULARTERM\nvec3 specular;\n#endif\n#ifdef NDOTL\nfloat ndl;\n#endif\n};\nlightingInfo computeLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\nlightingInfo result;\nvec3 lightVectorW;\nfloat attenuation=1.0;\nif (lightData.w==0.)\n{\nvec3 direction=lightData.xyz-vPositionW;\nattenuation=max(0.,1.0-length(direction)/range);\nlightVectorW=normalize(direction);\n}\nelse\n{\nlightVectorW=normalize(-lightData.xyz);\n}\nfloat ndl=max(0.,dot(vNormal,lightVectorW));\n#ifdef NDOTL\nresult.ndl=ndl;\n#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\n#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\nfloat specComp=max(0.,dot(vNormal,angleW));\nspecComp=pow(specComp,max(1.,glossiness));\nresult.specular=specComp*specularColor*attenuation;\n#endif\nreturn result;\n}\nlightingInfo computeSpotLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec4 lightDirection,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\nlightingInfo result;\nvec3 direction=lightData.xyz-vPositionW;\nvec3 lightVectorW=normalize(direction);\nfloat attenuation=max(0.,1.0-length(direction)/range);\nfloat cosAngle=max(0.,dot(lightDirection.xyz,-lightVectorW));\nif (cosAngle>=lightDirection.w)\n{\ncosAngle=max(0.,pow(cosAngle,lightData.w));\nattenuation*=cosAngle;\nfloat ndl=max(0.,dot(vNormal,lightVectorW));\n#ifdef NDOTL\nresult.ndl=ndl;\n#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\n#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\nfloat specComp=max(0.,dot(vNormal,angleW));\nspecComp=pow(specComp,max(1.,glossiness));\nresult.specular=specComp*specularColor*attenuation;\n#endif\nreturn result;\n}\nresult.diffuse=vec3(0.);\n#ifdef SPECULARTERM\nresult.specular=vec3(0.);\n#endif\n#ifdef NDOTL\nresult.ndl=0.;\n#endif\nreturn result;\n}\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,vec3 groundColor,float glossiness) {\nlightingInfo result;\nfloat ndl=dot(vNormal,lightData.xyz)*0.5+0.5;\n#ifdef NDOTL\nresult.ndl=ndl;\n#endif\nresult.diffuse=mix(groundColor,diffuseColor,ndl);\n#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightData.xyz);\nfloat specComp=max(0.,dot(vNormal,angleW));\nspecComp=pow(specComp,max(1.,glossiness));\nresult.specular=specComp*specularColor;\n#endif\nreturn result;\n}\n#define inline\nvec3 computeProjectionTextureDiffuseLighting(sampler2D projectionLightSampler,mat4 textureProjectionMatrix){\nvec4 strq=textureProjectionMatrix*vec4(vPositionW,1.0);\nstrq/=strq.w;\nvec3 textureColor=texture2D(projectionLightSampler,strq.xy).rgb;\nreturn textureColor;\n}`;\n// Sideeffect\n_shaderStore.ShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nconst lightsFragmentFunctions = exports.lightsFragmentFunctions = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":10,"column":13}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":4,"column":38},"generated":{"line":10,"column":38}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":11,"column":15}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":101,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":96,"column":0},"generated":{"line":102,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":97,"column":0},"generated":{"line":103,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":97,"column":11},"generated":{"line":103,"column":24}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":97,"column":12},"generated":{"line":103,"column":25}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":97,"column":32},"generated":{"line":103,"column":45}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":97,"column":33},"generated":{"line":103,"column":46}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":97,"column":37},"generated":{"line":103,"column":50}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":97,"column":38},"generated":{"line":103,"column":51}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":97,"column":41},"generated":{"line":103,"column":54}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":97,"column":47},"generated":{"line":103,"column":60}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":98,"column":0},"generated":{"line":104,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":7},"generated":{"line":105,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":13},"generated":{"line":105,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":36},"generated":{"line":105,"column":29}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":36},"generated":{"line":105,"column":32}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":36},"generated":{"line":105,"column":39}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":36},"generated":{"line":105,"column":40}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":36},"generated":{"line":105,"column":63}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":39},"generated":{"line":105,"column":66}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":41},"generated":{"line":106,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":45},"generated":{"line":106,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":47},"generated":{"line":107,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":53},"generated":{"line":108,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts","name":null,"original":{"line":99,"column":55},"generated":{"line":108,"column":1}}],"sources":{"../../../../../lts/core/generated/Shaders/ShadersInclude/lightsFragmentFunctions.ts":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"lightsFragmentFunctions\";\nconst shader = `struct lightingInfo\r{\rvec3 diffuse;\r#ifdef SPECULARTERM\nvec3 specular;\r#endif\n#ifdef NDOTL\nfloat ndl;\r#endif\n};\rlightingInfo computeLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\rlightingInfo result;\rvec3 lightVectorW;\rfloat attenuation=1.0;\rif (lightData.w==0.)\r{\rvec3 direction=lightData.xyz-vPositionW;\rattenuation=max(0.,1.0-length(direction)/range);\rlightVectorW=normalize(direction);\r}\relse\r{\rlightVectorW=normalize(-lightData.xyz);\r}\rfloat ndl=max(0.,dot(vNormal,lightVectorW));\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor*attenuation;\r#endif\nreturn result;\r}\rlightingInfo computeSpotLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec4 lightDirection,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\rlightingInfo result;\rvec3 direction=lightData.xyz-vPositionW;\rvec3 lightVectorW=normalize(direction);\rfloat attenuation=max(0.,1.0-length(direction)/range);\rfloat cosAngle=max(0.,dot(lightDirection.xyz,-lightVectorW));\rif (cosAngle>=lightDirection.w)\r{\rcosAngle=max(0.,pow(cosAngle,lightData.w));\rattenuation*=cosAngle;\rfloat ndl=max(0.,dot(vNormal,lightVectorW));\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor*attenuation;\r#endif\nreturn result;\r}\rresult.diffuse=vec3(0.);\r#ifdef SPECULARTERM\nresult.specular=vec3(0.);\r#endif\n#ifdef NDOTL\nresult.ndl=0.;\r#endif\nreturn result;\r}\rlightingInfo computeHemisphericLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,vec3 groundColor,float glossiness) {\rlightingInfo result;\rfloat ndl=dot(vNormal,lightData.xyz)*0.5+0.5;\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=mix(groundColor,diffuseColor,ndl);\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightData.xyz);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor;\r#endif\nreturn result;\r}\r#define inline\nvec3 computeProjectionTextureDiffuseLighting(sampler2D projectionLightSampler,mat4 textureProjectionMatrix){\rvec4 strq=textureProjectionMatrix*vec4(vPositionW,1.0);\rstrq/=strq.w;\rvec3 textureColor=texture2D(projectionLightSampler,strq.xy).rgb;\rreturn textureColor;\r}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightsFragmentFunctions = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"d8af4f9afabf38229958a49909973e36","cacheData":{"env":{}}}