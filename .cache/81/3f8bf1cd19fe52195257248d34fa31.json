{"id":"node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragmentFunctions.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\bumpFragmentFunctions.js.map","includedInParent":true,"mtime":1704105649178},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\bumpFragmentFunctions.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"},{"name":"./samplerFragmentDeclaration.js","loc":{"line":3,"column":7,"index":83},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\bumpFragmentFunctions.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\samplerFragmentDeclaration.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bumpFragmentFunctions = void 0;\nvar _shaderStore = require(\"../../Engines/shaderStore.js\");\nrequire(\"./samplerFragmentDeclaration.js\");\n// Do not edit.\n\nconst name = \"bumpFragmentFunctions\";\nconst shader = `#if defined(BUMP)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump)\n#endif\n#if defined(DETAIL)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DETAIL,_VARYINGNAME_,Detail,_SAMPLERNAME_,detail)\n#endif\n#if defined(BUMP) && defined(PARALLAX)\nconst float minSamples=4.;\nconst float maxSamples=15.;\nconst int iMaxSamples=15;\nvec2 parallaxOcclusion(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale) {\nfloat parallaxLimit=length(vViewDirCoT.xy)/vViewDirCoT.z;\nparallaxLimit*=parallaxScale;\nvec2 vOffsetDir=normalize(vViewDirCoT.xy);\nvec2 vMaxOffset=vOffsetDir*parallaxLimit;\nfloat numSamples=maxSamples+(dot(vViewDirCoT,vNormalCoT)*(minSamples-maxSamples));\nfloat stepSize=1.0/numSamples;\nfloat currRayHeight=1.0;\nvec2 vCurrOffset=vec2(0,0);\nvec2 vLastOffset=vec2(0,0);\nfloat lastSampledHeight=1.0;\nfloat currSampledHeight=1.0;\nbool keepWorking=true;\nfor (int i=0; i<iMaxSamples; i++)\n{\ncurrSampledHeight=texture2D(bumpSampler,texCoord+vCurrOffset).w;\nif (!keepWorking)\n{\n}\nelse if (currSampledHeight>currRayHeight)\n{\nfloat delta1=currSampledHeight-currRayHeight;\nfloat delta2=(currRayHeight+stepSize)-lastSampledHeight;\nfloat ratio=delta1/(delta1+delta2);\nvCurrOffset=(ratio)* vLastOffset+(1.0-ratio)*vCurrOffset;\nkeepWorking=false;\n}\nelse\n{\ncurrRayHeight-=stepSize;\nvLastOffset=vCurrOffset;\nvCurrOffset+=stepSize*vMaxOffset;\nlastSampledHeight=currSampledHeight;\n}\n}\nreturn vCurrOffset;\n}\nvec2 parallaxOffset(vec3 viewDir,float heightScale)\n{\nfloat height=texture2D(bumpSampler,vBumpUV).w;\nvec2 texCoordOffset=heightScale*viewDir.xy*height;\nreturn -texCoordOffset;\n}\n#endif\n`;\n// Sideeffect\n_shaderStore.ShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nconst bumpFragmentFunctions = exports.bumpFragmentFunctions = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":7}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":5,"column":10},"generated":{"line":11,"column":10}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":5,"column":13},"generated":{"line":11,"column":13}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":5,"column":36},"generated":{"line":11,"column":36}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":6,"column":6},"generated":{"line":12,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":6,"column":12},"generated":{"line":12,"column":12}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":6,"column":15},"generated":{"line":12,"column":15}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":60,"column":1},"generated":{"line":66,"column":1}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":61,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":62,"column":0},"generated":{"line":68,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":62,"column":11},"generated":{"line":68,"column":24}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":62,"column":12},"generated":{"line":68,"column":25}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":62,"column":32},"generated":{"line":68,"column":45}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":62,"column":33},"generated":{"line":68,"column":46}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":62,"column":37},"generated":{"line":68,"column":50}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":62,"column":38},"generated":{"line":68,"column":51}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":62,"column":41},"generated":{"line":68,"column":54}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":68,"column":60}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":69,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":7},"generated":{"line":70,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":13},"generated":{"line":70,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":34},"generated":{"line":70,"column":27}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":34},"generated":{"line":70,"column":30}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":34},"generated":{"line":70,"column":37}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":34},"generated":{"line":70,"column":38}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":34},"generated":{"line":70,"column":59}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":37},"generated":{"line":70,"column":62}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":39},"generated":{"line":71,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":43},"generated":{"line":71,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":45},"generated":{"line":72,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":51},"generated":{"line":73,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","name":null,"original":{"line":64,"column":53},"generated":{"line":73,"column":1}}],"sources":{"../../../../../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nimport \"./samplerFragmentDeclaration\";\n\nconst name = \"bumpFragmentFunctions\";\nconst shader = `#if defined(BUMP)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump)\n#endif\n#if defined(DETAIL)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DETAIL,_VARYINGNAME_,Detail,_SAMPLERNAME_,detail)\n#endif\n#if defined(BUMP) && defined(PARALLAX)\nconst float minSamples=4.;\rconst float maxSamples=15.;\rconst int iMaxSamples=15;\rvec2 parallaxOcclusion(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale) {\rfloat parallaxLimit=length(vViewDirCoT.xy)/vViewDirCoT.z;\rparallaxLimit*=parallaxScale;\rvec2 vOffsetDir=normalize(vViewDirCoT.xy);\rvec2 vMaxOffset=vOffsetDir*parallaxLimit;\rfloat numSamples=maxSamples+(dot(vViewDirCoT,vNormalCoT)*(minSamples-maxSamples));\rfloat stepSize=1.0/numSamples;\rfloat currRayHeight=1.0;\rvec2 vCurrOffset=vec2(0,0);\rvec2 vLastOffset=vec2(0,0);\rfloat lastSampledHeight=1.0;\rfloat currSampledHeight=1.0;\rbool keepWorking=true;\rfor (int i=0; i<iMaxSamples; i++)\r{\rcurrSampledHeight=texture2D(bumpSampler,texCoord+vCurrOffset).w;\rif (!keepWorking)\r{\r}\relse if (currSampledHeight>currRayHeight)\r{\rfloat delta1=currSampledHeight-currRayHeight;\rfloat delta2=(currRayHeight+stepSize)-lastSampledHeight;\rfloat ratio=delta1/(delta1+delta2);\rvCurrOffset=(ratio)* vLastOffset+(1.0-ratio)*vCurrOffset;\rkeepWorking=false;\r}\relse\r{\rcurrRayHeight-=stepSize;\rvLastOffset=vCurrOffset;\rvCurrOffset+=stepSize*vMaxOffset;\rlastSampledHeight=currSampledHeight;\r}\r}\rreturn vCurrOffset;\r}\rvec2 parallaxOffset(vec3 viewDir,float heightScale)\r{\rfloat height=texture2D(bumpSampler,vBumpUV).w;\rvec2 texCoordOffset=heightScale*viewDir.xy*height;\rreturn -texCoordOffset;\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpFragmentFunctions = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"e65f480029b9677b0b69b7d38df13e79","cacheData":{"env":{}}}