{"id":"node_modules/@babylonjs/core/Shaders/depthOfField.fragment.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\depthOfField.fragment.js.map","includedInParent":true,"mtime":1704105649252},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\depthOfField.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.depthOfFieldPixelShader = void 0;\nvar _shaderStore = require(\"../Engines/shaderStore.js\");\n// Do not edit.\n\nconst name = \"depthOfFieldPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\nuniform sampler2D highlightsSampler;\nuniform sampler2D depthSampler;\nuniform sampler2D grainSampler;\nuniform float grain_amount;\nuniform bool blur_noise;\nuniform float screen_width;\nuniform float screen_height;\nuniform float distortion;\nuniform bool dof_enabled;\nuniform float screen_distance; \nuniform float aperture;\nuniform float darken;\nuniform float edge_blur;\nuniform bool highlights;\nuniform float near;\nuniform float far;\nvarying vec2 vUV;\n#define PI 3.14159265\n#define TWOPI 6.28318530\n#define inverse_focal_length 0.1 \nvec2 centered_screen_pos;\nvec2 distorted_coords;\nfloat radius2;\nfloat radius;\nvec2 rand(vec2 co)\n{\nfloat noise1=(fract(sin(dot(co,vec2(12.9898,78.233)))*43758.5453));\nfloat noise2=(fract(sin(dot(co,vec2(12.9898,78.233)*2.0))*43758.5453));\nreturn clamp(vec2(noise1,noise2),0.0,1.0);\n}\nvec2 getDistortedCoords(vec2 coords) {\nif (distortion==0.0) { return coords; }\nvec2 direction=1.0*normalize(centered_screen_pos);\nvec2 dist_coords=vec2(0.5,0.5);\ndist_coords.x=0.5+direction.x*radius2*1.0;\ndist_coords.y=0.5+direction.y*radius2*1.0;\nfloat dist_amount=clamp(distortion*0.23,0.0,1.0);\ndist_coords=mix(coords,dist_coords,dist_amount);\nreturn dist_coords;\n}\nfloat sampleScreen(inout vec4 color,in vec2 offset,in float weight) {\nvec2 coords=distorted_coords;\nfloat angle=rand(coords*100.0).x*TWOPI;\ncoords+=vec2(offset.x*cos(angle)-offset.y*sin(angle),offset.x*sin(angle)+offset.y*cos(angle));\ncolor+=texture2D(textureSampler,coords)*weight;\nreturn weight;\n}\nfloat getBlurLevel(float size) {\nreturn min(3.0,ceil(size/1.0));\n}\nvec4 getBlurColor(float size) {\nvec4 col=texture2D(textureSampler,distorted_coords);\nfloat blur_level=getBlurLevel(size);\nfloat w=(size/screen_width);\nfloat h=(size/screen_height);\nfloat total_weight=1.0;\nvec2 sample_coords;\ntotal_weight+=sampleScreen(col,vec2(-0.50*w,0.24*h),0.93);\ntotal_weight+=sampleScreen(col,vec2(0.30*w,-0.75*h),0.90);\ntotal_weight+=sampleScreen(col,vec2(0.36*w,0.96*h),0.87);\ntotal_weight+=sampleScreen(col,vec2(-1.08*w,-0.55*h),0.85);\ntotal_weight+=sampleScreen(col,vec2(1.33*w,-0.37*h),0.83);\ntotal_weight+=sampleScreen(col,vec2(-0.82*w,1.31*h),0.80);\ntotal_weight+=sampleScreen(col,vec2(-0.31*w,-1.67*h),0.78);\ntotal_weight+=sampleScreen(col,vec2(1.47*w,1.11*h),0.76);\ntotal_weight+=sampleScreen(col,vec2(-1.97*w,0.19*h),0.74);\ntotal_weight+=sampleScreen(col,vec2(1.42*w,-1.57*h),0.72);\nif (blur_level>1.0) {\ntotal_weight+=sampleScreen(col,vec2(0.01*w,2.25*h),0.70);\ntotal_weight+=sampleScreen(col,vec2(-1.62*w,-1.74*h),0.67);\ntotal_weight+=sampleScreen(col,vec2(2.49*w,0.20*h),0.65);\ntotal_weight+=sampleScreen(col,vec2(-2.07*w,1.61*h),0.63);\ntotal_weight+=sampleScreen(col,vec2(0.46*w,-2.70*h),0.61);\ntotal_weight+=sampleScreen(col,vec2(1.55*w,2.40*h),0.59);\ntotal_weight+=sampleScreen(col,vec2(-2.88*w,-0.75*h),0.56);\ntotal_weight+=sampleScreen(col,vec2(2.73*w,-1.44*h),0.54);\ntotal_weight+=sampleScreen(col,vec2(-1.08*w,3.02*h),0.52);\ntotal_weight+=sampleScreen(col,vec2(-1.28*w,-3.05*h),0.49);\n}\nif (blur_level>2.0) {\ntotal_weight+=sampleScreen(col,vec2(3.11*w,1.43*h),0.46);\ntotal_weight+=sampleScreen(col,vec2(-3.36*w,1.08*h),0.44);\ntotal_weight+=sampleScreen(col,vec2(1.80*w,-3.16*h),0.41);\ntotal_weight+=sampleScreen(col,vec2(0.83*w,3.65*h),0.38);\ntotal_weight+=sampleScreen(col,vec2(-3.16*w,-2.19*h),0.34);\ntotal_weight+=sampleScreen(col,vec2(3.92*w,-0.53*h),0.31);\ntotal_weight+=sampleScreen(col,vec2(-2.59*w,3.12*h),0.26);\ntotal_weight+=sampleScreen(col,vec2(-0.20*w,-4.15*h),0.22);\ntotal_weight+=sampleScreen(col,vec2(3.02*w,3.00*h),0.15);\n}\ncol/=total_weight; \nif (darken>0.0) {\ncol.rgb*=clamp(0.3,1.0,1.05-size*0.5*darken);\n}\nreturn col;\n}\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\n{\ncentered_screen_pos=vec2(vUV.x-0.5,vUV.y-0.5);\nradius2=centered_screen_pos.x*centered_screen_pos.x+centered_screen_pos.y*centered_screen_pos.y;\nradius=sqrt(radius2);\ndistorted_coords=getDistortedCoords(vUV); \nvec2 texels_coords=vec2(vUV.x*screen_width,vUV.y*screen_height); \nfloat depth=texture2D(depthSampler,distorted_coords).r; \nfloat distance=near+(far-near)*depth; \nvec4 color=texture2D(textureSampler,vUV); \nfloat coc=abs(aperture*(screen_distance*(inverse_focal_length-1.0/distance)-1.0));\nif (dof_enabled==false || coc<0.07) { coc=0.0; }\nfloat edge_blur_amount=0.0;\nif (edge_blur>0.0) {\nedge_blur_amount=clamp((radius*2.0-1.0+0.15*edge_blur)*1.5,0.0,1.0)*1.3;\n}\nfloat blur_amount=max(edge_blur_amount,coc);\nif (blur_amount==0.0) {\ngl_FragColor=texture2D(textureSampler,distorted_coords);\n}\nelse {\ngl_FragColor=getBlurColor(blur_amount*1.7);\nif (highlights) {\ngl_FragColor.rgb+=clamp(coc,0.0,1.0)*texture2D(highlightsSampler,distorted_coords).rgb;\n}\nif (blur_noise) {\nvec2 noise=rand(distorted_coords)*0.01*blur_amount;\nvec2 blurred_coord=vec2(distorted_coords.x+noise.x,distorted_coords.y+noise.y);\ngl_FragColor=0.04*texture2D(textureSampler,blurred_coord)+0.96*gl_FragColor;\n}\n}\nif (grain_amount>0.0) {\nvec4 grain_color=texture2D(grainSampler,texels_coords*0.003);\ngl_FragColor.rgb+=(-0.5+grain_color.rgb)*0.30*grain_amount;\n}\n}\n`;\n// Sideeffect\n_shaderStore.ShaderStore.ShadersStore[name] = shader;\n/** @internal */\nconst depthOfFieldPixelShader = exports.depthOfFieldPixelShader = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":10,"column":13}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":4,"column":38},"generated":{"line":10,"column":38}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":11,"column":15}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":139,"column":1},"generated":{"line":145,"column":1}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":140,"column":0},"generated":{"line":146,"column":0}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":141,"column":0},"generated":{"line":147,"column":0}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":141,"column":11},"generated":{"line":147,"column":24}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":141,"column":12},"generated":{"line":147,"column":25}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":141,"column":24},"generated":{"line":147,"column":37}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":141,"column":25},"generated":{"line":147,"column":38}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":141,"column":29},"generated":{"line":147,"column":42}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":141,"column":30},"generated":{"line":147,"column":43}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":141,"column":33},"generated":{"line":147,"column":46}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":141,"column":39},"generated":{"line":147,"column":52}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":142,"column":0},"generated":{"line":148,"column":0}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":7},"generated":{"line":149,"column":0}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":13},"generated":{"line":149,"column":6}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":36},"generated":{"line":149,"column":29}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":36},"generated":{"line":149,"column":32}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":36},"generated":{"line":149,"column":39}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":36},"generated":{"line":149,"column":40}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":36},"generated":{"line":149,"column":63}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":39},"generated":{"line":149,"column":66}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":41},"generated":{"line":150,"column":2}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":45},"generated":{"line":150,"column":6}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":47},"generated":{"line":151,"column":2}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":53},"generated":{"line":152,"column":0}},{"source":"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts","name":null,"original":{"line":143,"column":55},"generated":{"line":152,"column":1}}],"sources":{"../../../../lts/core/generated/Shaders/depthOfField.fragment.ts":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"depthOfFieldPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\runiform sampler2D highlightsSampler;\runiform sampler2D depthSampler;\runiform sampler2D grainSampler;\runiform float grain_amount;\runiform bool blur_noise;\runiform float screen_width;\runiform float screen_height;\runiform float distortion;\runiform bool dof_enabled;\runiform float screen_distance; \runiform float aperture;\runiform float darken;\runiform float edge_blur;\runiform bool highlights;\runiform float near;\runiform float far;\rvarying vec2 vUV;\r#define PI 3.14159265\n#define TWOPI 6.28318530\n#define inverse_focal_length 0.1 \nvec2 centered_screen_pos;\rvec2 distorted_coords;\rfloat radius2;\rfloat radius;\rvec2 rand(vec2 co)\r{\rfloat noise1=(fract(sin(dot(co,vec2(12.9898,78.233)))*43758.5453));\rfloat noise2=(fract(sin(dot(co,vec2(12.9898,78.233)*2.0))*43758.5453));\rreturn clamp(vec2(noise1,noise2),0.0,1.0);\r}\rvec2 getDistortedCoords(vec2 coords) {\rif (distortion==0.0) { return coords; }\rvec2 direction=1.0*normalize(centered_screen_pos);\rvec2 dist_coords=vec2(0.5,0.5);\rdist_coords.x=0.5+direction.x*radius2*1.0;\rdist_coords.y=0.5+direction.y*radius2*1.0;\rfloat dist_amount=clamp(distortion*0.23,0.0,1.0);\rdist_coords=mix(coords,dist_coords,dist_amount);\rreturn dist_coords;\r}\rfloat sampleScreen(inout vec4 color,in vec2 offset,in float weight) {\rvec2 coords=distorted_coords;\rfloat angle=rand(coords*100.0).x*TWOPI;\rcoords+=vec2(offset.x*cos(angle)-offset.y*sin(angle),offset.x*sin(angle)+offset.y*cos(angle));\rcolor+=texture2D(textureSampler,coords)*weight;\rreturn weight;\r}\rfloat getBlurLevel(float size) {\rreturn min(3.0,ceil(size/1.0));\r}\rvec4 getBlurColor(float size) {\rvec4 col=texture2D(textureSampler,distorted_coords);\rfloat blur_level=getBlurLevel(size);\rfloat w=(size/screen_width);\rfloat h=(size/screen_height);\rfloat total_weight=1.0;\rvec2 sample_coords;\rtotal_weight+=sampleScreen(col,vec2(-0.50*w,0.24*h),0.93);\rtotal_weight+=sampleScreen(col,vec2(0.30*w,-0.75*h),0.90);\rtotal_weight+=sampleScreen(col,vec2(0.36*w,0.96*h),0.87);\rtotal_weight+=sampleScreen(col,vec2(-1.08*w,-0.55*h),0.85);\rtotal_weight+=sampleScreen(col,vec2(1.33*w,-0.37*h),0.83);\rtotal_weight+=sampleScreen(col,vec2(-0.82*w,1.31*h),0.80);\rtotal_weight+=sampleScreen(col,vec2(-0.31*w,-1.67*h),0.78);\rtotal_weight+=sampleScreen(col,vec2(1.47*w,1.11*h),0.76);\rtotal_weight+=sampleScreen(col,vec2(-1.97*w,0.19*h),0.74);\rtotal_weight+=sampleScreen(col,vec2(1.42*w,-1.57*h),0.72);\rif (blur_level>1.0) {\rtotal_weight+=sampleScreen(col,vec2(0.01*w,2.25*h),0.70);\rtotal_weight+=sampleScreen(col,vec2(-1.62*w,-1.74*h),0.67);\rtotal_weight+=sampleScreen(col,vec2(2.49*w,0.20*h),0.65);\rtotal_weight+=sampleScreen(col,vec2(-2.07*w,1.61*h),0.63);\rtotal_weight+=sampleScreen(col,vec2(0.46*w,-2.70*h),0.61);\rtotal_weight+=sampleScreen(col,vec2(1.55*w,2.40*h),0.59);\rtotal_weight+=sampleScreen(col,vec2(-2.88*w,-0.75*h),0.56);\rtotal_weight+=sampleScreen(col,vec2(2.73*w,-1.44*h),0.54);\rtotal_weight+=sampleScreen(col,vec2(-1.08*w,3.02*h),0.52);\rtotal_weight+=sampleScreen(col,vec2(-1.28*w,-3.05*h),0.49);\r}\rif (blur_level>2.0) {\rtotal_weight+=sampleScreen(col,vec2(3.11*w,1.43*h),0.46);\rtotal_weight+=sampleScreen(col,vec2(-3.36*w,1.08*h),0.44);\rtotal_weight+=sampleScreen(col,vec2(1.80*w,-3.16*h),0.41);\rtotal_weight+=sampleScreen(col,vec2(0.83*w,3.65*h),0.38);\rtotal_weight+=sampleScreen(col,vec2(-3.16*w,-2.19*h),0.34);\rtotal_weight+=sampleScreen(col,vec2(3.92*w,-0.53*h),0.31);\rtotal_weight+=sampleScreen(col,vec2(-2.59*w,3.12*h),0.26);\rtotal_weight+=sampleScreen(col,vec2(-0.20*w,-4.15*h),0.22);\rtotal_weight+=sampleScreen(col,vec2(3.02*w,3.00*h),0.15);\r}\rcol/=total_weight; \rif (darken>0.0) {\rcol.rgb*=clamp(0.3,1.0,1.05-size*0.5*darken);\r}\rreturn col;\r}\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\rcentered_screen_pos=vec2(vUV.x-0.5,vUV.y-0.5);\rradius2=centered_screen_pos.x*centered_screen_pos.x+centered_screen_pos.y*centered_screen_pos.y;\rradius=sqrt(radius2);\rdistorted_coords=getDistortedCoords(vUV); \rvec2 texels_coords=vec2(vUV.x*screen_width,vUV.y*screen_height); \rfloat depth=texture2D(depthSampler,distorted_coords).r; \rfloat distance=near+(far-near)*depth; \rvec4 color=texture2D(textureSampler,vUV); \rfloat coc=abs(aperture*(screen_distance*(inverse_focal_length-1.0/distance)-1.0));\rif (dof_enabled==false || coc<0.07) { coc=0.0; }\rfloat edge_blur_amount=0.0;\rif (edge_blur>0.0) {\redge_blur_amount=clamp((radius*2.0-1.0+0.15*edge_blur)*1.5,0.0,1.0)*1.3;\r}\rfloat blur_amount=max(edge_blur_amount,coc);\rif (blur_amount==0.0) {\rgl_FragColor=texture2D(textureSampler,distorted_coords);\r}\relse {\rgl_FragColor=getBlurColor(blur_amount*1.7);\rif (highlights) {\rgl_FragColor.rgb+=clamp(coc,0.0,1.0)*texture2D(highlightsSampler,distorted_coords).rgb;\r}\rif (blur_noise) {\rvec2 noise=rand(distorted_coords)*0.01*blur_amount;\rvec2 blurred_coord=vec2(distorted_coords.x+noise.x,distorted_coords.y+noise.y);\rgl_FragColor=0.04*texture2D(textureSampler,blurred_coord)+0.96*gl_FragColor;\r}\r}\rif (grain_amount>0.0) {\rvec4 grain_color=texture2D(grainSampler,texels_coords*0.003);\rgl_FragColor.rgb+=(-0.5+grain_color.rgb)*0.30*grain_amount;\r}\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const depthOfFieldPixelShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"56e2467023535ebc1661b54b384abcbd","cacheData":{"env":{}}}