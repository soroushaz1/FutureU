{"id":"node_modules/@babylonjs/core/Shaders/geometry.fragment.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\geometry.fragment.js.map","includedInParent":true,"mtime":1704105649397},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\geometry.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"},{"name":"./ShadersInclude/clipPlaneFragmentDeclaration.js","loc":{"line":3,"column":7,"index":80},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\geometry.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\clipPlaneFragmentDeclaration.js"},{"name":"./ShadersInclude/mrtFragmentDeclaration.js","loc":{"line":4,"column":7,"index":139},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\geometry.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\mrtFragmentDeclaration.js"},{"name":"./ShadersInclude/bumpFragmentMainFunctions.js","loc":{"line":5,"column":7,"index":192},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\geometry.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\bumpFragmentMainFunctions.js"},{"name":"./ShadersInclude/bumpFragmentFunctions.js","loc":{"line":6,"column":7,"index":248},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\geometry.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\bumpFragmentFunctions.js"},{"name":"./ShadersInclude/helperFunctions.js","loc":{"line":7,"column":7,"index":300},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\geometry.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\helperFunctions.js"},{"name":"./ShadersInclude/clipPlaneFragment.js","loc":{"line":8,"column":7,"index":346},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\geometry.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\clipPlaneFragment.js"},{"name":"./ShadersInclude/bumpFragment.js","loc":{"line":9,"column":7,"index":394},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\geometry.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\bumpFragment.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.geometryPixelShader = void 0;\nvar _shaderStore = require(\"../Engines/shaderStore.js\");\nrequire(\"./ShadersInclude/clipPlaneFragmentDeclaration.js\");\nrequire(\"./ShadersInclude/mrtFragmentDeclaration.js\");\nrequire(\"./ShadersInclude/bumpFragmentMainFunctions.js\");\nrequire(\"./ShadersInclude/bumpFragmentFunctions.js\");\nrequire(\"./ShadersInclude/helperFunctions.js\");\nrequire(\"./ShadersInclude/clipPlaneFragment.js\");\nrequire(\"./ShadersInclude/bumpFragment.js\");\n// Do not edit.\n\nconst name = \"geometryPixelShader\";\nconst shader = `#extension GL_EXT_draw_buffers : require\n#if defined(BUMP) || !defined(NORMAL)\n#extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#ifdef BUMP\nvarying mat4 vWorldView;\nvarying vec3 vNormalW;\n#else\nvarying vec3 vNormalV;\n#endif\nvarying vec4 vViewPos;\n#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\n#endif\n#ifdef VELOCITY\nvarying vec4 vCurrentPosition;\nvarying vec4 vPreviousPosition;\n#endif\n#ifdef NEED_UV\nvarying vec2 vUV;\n#endif\n#ifdef BUMP\nuniform vec3 vBumpInfos;\nuniform vec2 vTangentSpaceParams;\n#endif\n#if defined(REFLECTIVITY)\n#if defined(ORMTEXTURE) || defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nuniform sampler2D reflectivitySampler;\nvarying vec2 vReflectivityUV;\n#endif\n#ifdef ALBEDOTEXTURE\nvarying vec2 vAlbedoUV;\nuniform sampler2D albedoSampler;\n#endif\n#ifdef REFLECTIVITYCOLOR\nuniform vec3 reflectivityColor;\n#endif\n#ifdef ALBEDOCOLOR\nuniform vec3 albedoColor;\n#endif\n#ifdef METALLIC\nuniform float metallic;\n#endif\n#if defined(ROUGHNESS) || defined(GLOSSINESS)\nuniform float glossiness;\n#endif\n#endif\n#if defined(ALPHATEST) && defined(NEED_UV)\nuniform sampler2D diffuseSampler;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#include<mrtFragmentDeclaration>[RENDER_TARGET_COUNT]\n#include<bumpFragmentMainFunctions>\n#include<bumpFragmentFunctions>\n#include<helperFunctions>\nvoid main() {\n#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (texture2D(diffuseSampler,vUV).a<0.4)\ndiscard;\n#endif\nvec3 normalOutput;\n#ifdef BUMP\nvec3 normalW=normalize(vNormalW);\n#include<bumpFragment>\nnormalOutput=normalize(vec3(vWorldView*vec4(normalW,0.0)));\n#else\nnormalOutput=normalize(vNormalV);\n#endif\n#ifdef PREPASS\n#ifdef PREPASS_DEPTH\ngl_FragData[DEPTH_INDEX]=vec4(vViewPos.z/vViewPos.w,0.0,0.0,1.0);\n#endif\n#ifdef PREPASS_NORMAL\ngl_FragData[NORMAL_INDEX]=vec4(normalOutput,1.0);\n#endif\n#else\ngl_FragData[0]=vec4(vViewPos.z/vViewPos.w,0.0,0.0,1.0);\ngl_FragData[1]=vec4(normalOutput,1.0);\n#endif\n#ifdef POSITION\ngl_FragData[POSITION_INDEX]=vec4(vPositionW,1.0);\n#endif\n#ifdef VELOCITY\nvec2 a=(vCurrentPosition.xy/vCurrentPosition.w)*0.5+0.5;\nvec2 b=(vPreviousPosition.xy/vPreviousPosition.w)*0.5+0.5;\nvec2 velocity=abs(a-b);\nvelocity=vec2(pow(velocity.x,1.0/3.0),pow(velocity.y,1.0/3.0))*sign(a-b)*0.5+0.5;\ngl_FragData[VELOCITY_INDEX]=vec4(velocity,0.0,1.0);\n#endif\n#ifdef REFLECTIVITY\nvec4 reflectivity=vec4(0.0,0.0,0.0,1.0);\n#ifdef METALLICWORKFLOW\nfloat metal=1.0;\nfloat roughness=1.0;\n#ifdef ORMTEXTURE\nmetal*=texture2D(reflectivitySampler,vReflectivityUV).b;\nroughness*=texture2D(reflectivitySampler,vReflectivityUV).g;\n#endif\n#ifdef METALLIC\nmetal*=metallic;\n#endif\n#ifdef ROUGHNESS\nroughness*=(1.0-glossiness); \n#endif\nreflectivity.a-=roughness;\nvec3 color=vec3(1.0);\n#ifdef ALBEDOTEXTURE\ncolor=texture2D(albedoSampler,vAlbedoUV).rgb;\n#ifdef GAMMAALBEDO\ncolor=toLinearSpace(color);\n#endif\n#endif\n#ifdef ALBEDOCOLOR\ncolor*=albedoColor.xyz;\n#endif\nreflectivity.rgb=mix(vec3(0.04),color,metal);\n#else\n#if defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nreflectivity=texture2D(reflectivitySampler,vReflectivityUV);\n#ifdef GAMMAREFLECTIVITYTEXTURE\nreflectivity.rgb=toLinearSpace(reflectivity.rgb);\n#endif\n#else \n#ifdef REFLECTIVITYCOLOR\nreflectivity.rgb=toLinearSpace(reflectivityColor.xyz);\nreflectivity.a=1.0;\n#endif\n#endif\n#ifdef GLOSSINESSS\nreflectivity.a*=glossiness; \n#endif\n#endif\ngl_FragData[REFLECTIVITY_INDEX]=reflectivity;\n#endif\n}\n`;\n// Sideeffect\n_shaderStore.ShaderStore.ShadersStore[name] = shader;\n/** @internal */\nconst geometryPixelShader = exports.geometryPixelShader = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":7}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":7}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":7}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":11,"column":7}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":12,"column":7}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":13,"column":7}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":14,"column":7}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":11,"column":6},"generated":{"line":17,"column":6}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":11,"column":10},"generated":{"line":17,"column":10}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":11,"column":13},"generated":{"line":17,"column":13}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":11,"column":34},"generated":{"line":17,"column":34}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":12,"column":6},"generated":{"line":18,"column":6}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":18,"column":12}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":12,"column":15},"generated":{"line":18,"column":15}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":149,"column":1},"generated":{"line":155,"column":1}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":150,"column":0},"generated":{"line":156,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":151,"column":0},"generated":{"line":157,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":151,"column":11},"generated":{"line":157,"column":24}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":151,"column":12},"generated":{"line":157,"column":25}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":151,"column":24},"generated":{"line":157,"column":37}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":151,"column":25},"generated":{"line":157,"column":38}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":151,"column":29},"generated":{"line":157,"column":42}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":151,"column":30},"generated":{"line":157,"column":43}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":151,"column":33},"generated":{"line":157,"column":46}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":151,"column":39},"generated":{"line":157,"column":52}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":158,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":7},"generated":{"line":159,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":13},"generated":{"line":159,"column":6}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":32},"generated":{"line":159,"column":25}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":32},"generated":{"line":159,"column":28}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":32},"generated":{"line":159,"column":35}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":32},"generated":{"line":159,"column":36}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":32},"generated":{"line":159,"column":55}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":35},"generated":{"line":159,"column":58}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":37},"generated":{"line":160,"column":2}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":41},"generated":{"line":160,"column":6}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":43},"generated":{"line":161,"column":2}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":49},"generated":{"line":162,"column":0}},{"source":"../../../../lts/core/generated/Shaders/geometry.fragment.ts","name":null,"original":{"line":153,"column":51},"generated":{"line":162,"column":1}}],"sources":{"../../../../lts/core/generated/Shaders/geometry.fragment.ts":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/mrtFragmentDeclaration\";\nimport \"./ShadersInclude/bumpFragmentMainFunctions\";\nimport \"./ShadersInclude/bumpFragmentFunctions\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/clipPlaneFragment\";\nimport \"./ShadersInclude/bumpFragment\";\n\nconst name = \"geometryPixelShader\";\nconst shader = `#extension GL_EXT_draw_buffers : require\n#if defined(BUMP) || !defined(NORMAL)\n#extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\r#ifdef BUMP\nvarying mat4 vWorldView;\rvarying vec3 vNormalW;\r#else\nvarying vec3 vNormalV;\r#endif\nvarying vec4 vViewPos;\r#if defined(POSITION) || defined(BUMP)\nvarying vec3 vPositionW;\r#endif\n#ifdef VELOCITY\nvarying vec4 vCurrentPosition;\rvarying vec4 vPreviousPosition;\r#endif\n#ifdef NEED_UV\nvarying vec2 vUV;\r#endif\n#ifdef BUMP\nuniform vec3 vBumpInfos;\runiform vec2 vTangentSpaceParams;\r#endif\n#if defined(REFLECTIVITY)\n#if defined(ORMTEXTURE) || defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nuniform sampler2D reflectivitySampler;\rvarying vec2 vReflectivityUV;\r#endif\n#ifdef ALBEDOTEXTURE\nvarying vec2 vAlbedoUV;\runiform sampler2D albedoSampler;\r#endif\n#ifdef REFLECTIVITYCOLOR\nuniform vec3 reflectivityColor;\r#endif\n#ifdef ALBEDOCOLOR\nuniform vec3 albedoColor;\r#endif\n#ifdef METALLIC\nuniform float metallic;\r#endif\n#if defined(ROUGHNESS) || defined(GLOSSINESS)\nuniform float glossiness;\r#endif\n#endif\n#if defined(ALPHATEST) && defined(NEED_UV)\nuniform sampler2D diffuseSampler;\r#endif\n#include<clipPlaneFragmentDeclaration>\n#include<mrtFragmentDeclaration>[RENDER_TARGET_COUNT]\n#include<bumpFragmentMainFunctions>\n#include<bumpFragmentFunctions>\n#include<helperFunctions>\nvoid main() {\r#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (texture2D(diffuseSampler,vUV).a<0.4)\rdiscard;\r#endif\nvec3 normalOutput;\r#ifdef BUMP\nvec3 normalW=normalize(vNormalW);\r#include<bumpFragment>\nnormalOutput=normalize(vec3(vWorldView*vec4(normalW,0.0)));\r#else\nnormalOutput=normalize(vNormalV);\r#endif\n#ifdef PREPASS\n#ifdef PREPASS_DEPTH\ngl_FragData[DEPTH_INDEX]=vec4(vViewPos.z/vViewPos.w,0.0,0.0,1.0);\r#endif\n#ifdef PREPASS_NORMAL\ngl_FragData[NORMAL_INDEX]=vec4(normalOutput,1.0);\r#endif\n#else\ngl_FragData[0]=vec4(vViewPos.z/vViewPos.w,0.0,0.0,1.0);\rgl_FragData[1]=vec4(normalOutput,1.0);\r#endif\n#ifdef POSITION\ngl_FragData[POSITION_INDEX]=vec4(vPositionW,1.0);\r#endif\n#ifdef VELOCITY\nvec2 a=(vCurrentPosition.xy/vCurrentPosition.w)*0.5+0.5;\rvec2 b=(vPreviousPosition.xy/vPreviousPosition.w)*0.5+0.5;\rvec2 velocity=abs(a-b);\rvelocity=vec2(pow(velocity.x,1.0/3.0),pow(velocity.y,1.0/3.0))*sign(a-b)*0.5+0.5;\rgl_FragData[VELOCITY_INDEX]=vec4(velocity,0.0,1.0);\r#endif\n#ifdef REFLECTIVITY\nvec4 reflectivity=vec4(0.0,0.0,0.0,1.0);\r#ifdef METALLICWORKFLOW\nfloat metal=1.0;\rfloat roughness=1.0;\r#ifdef ORMTEXTURE\nmetal*=texture2D(reflectivitySampler,vReflectivityUV).b;\rroughness*=texture2D(reflectivitySampler,vReflectivityUV).g;\r#endif\n#ifdef METALLIC\nmetal*=metallic;\r#endif\n#ifdef ROUGHNESS\nroughness*=(1.0-glossiness); \r#endif\nreflectivity.a-=roughness;\rvec3 color=vec3(1.0);\r#ifdef ALBEDOTEXTURE\ncolor=texture2D(albedoSampler,vAlbedoUV).rgb;\r#ifdef GAMMAALBEDO\ncolor=toLinearSpace(color);\r#endif\n#endif\n#ifdef ALBEDOCOLOR\ncolor*=albedoColor.xyz;\r#endif\nreflectivity.rgb=mix(vec3(0.04),color,metal);\r#else\n#if defined(SPECULARGLOSSINESSTEXTURE) || defined(REFLECTIVITYTEXTURE)\nreflectivity=texture2D(reflectivitySampler,vReflectivityUV);\r#ifdef GAMMAREFLECTIVITYTEXTURE\nreflectivity.rgb=toLinearSpace(reflectivity.rgb);\r#endif\n#else \n#ifdef REFLECTIVITYCOLOR\nreflectivity.rgb=toLinearSpace(reflectivityColor.xyz);\rreflectivity.a=1.0;\r#endif\n#endif\n#ifdef GLOSSINESSS\nreflectivity.a*=glossiness; \r#endif\n#endif\ngl_FragData[REFLECTIVITY_INDEX]=reflectivity;\r#endif\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const geometryPixelShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"b9db6bc95887eb8081a671886a970e00","cacheData":{"env":{}}}