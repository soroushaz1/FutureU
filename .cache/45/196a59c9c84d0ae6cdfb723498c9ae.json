{"id":"node_modules/@babylonjs/core/Shaders/filter.fragment.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\filter.fragment.js.map","includedInParent":true,"mtime":1704105649342},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\filter.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterPixelShader = void 0;\nvar _shaderStore = require(\"../Engines/shaderStore.js\");\n// Do not edit.\n\nconst name = \"filterPixelShader\";\nconst shader = `varying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform mat4 kernelMatrix;\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\n{\nvec3 baseColor=texture2D(textureSampler,vUV).rgb;\nvec3 updatedColor=(kernelMatrix*vec4(baseColor,1.0)).rgb;\ngl_FragColor=vec4(updatedColor,1.0);\n}`;\n// Sideeffect\n_shaderStore.ShaderStore.ShadersStore[name] = shader;\n/** @internal */\nconst filterPixelShader = exports.filterPixelShader = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":10,"column":13}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":4,"column":32},"generated":{"line":10,"column":32}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":11,"column":15}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":14,"column":2},"generated":{"line":20,"column":2}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":16,"column":11},"generated":{"line":22,"column":24}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":16,"column":12},"generated":{"line":22,"column":25}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":16,"column":24},"generated":{"line":22,"column":37}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":16,"column":25},"generated":{"line":22,"column":38}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":16,"column":29},"generated":{"line":22,"column":42}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":16,"column":30},"generated":{"line":22,"column":43}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":16,"column":33},"generated":{"line":22,"column":46}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":16,"column":39},"generated":{"line":22,"column":52}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":7},"generated":{"line":24,"column":0}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":13},"generated":{"line":24,"column":6}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":30},"generated":{"line":24,"column":23}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":30},"generated":{"line":24,"column":26}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":30},"generated":{"line":24,"column":33}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":30},"generated":{"line":24,"column":34}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":30},"generated":{"line":24,"column":51}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":33},"generated":{"line":24,"column":54}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":35},"generated":{"line":25,"column":2}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":39},"generated":{"line":25,"column":6}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":41},"generated":{"line":26,"column":2}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":47},"generated":{"line":27,"column":0}},{"source":"../../../../lts/core/generated/Shaders/filter.fragment.ts","name":null,"original":{"line":18,"column":49},"generated":{"line":27,"column":1}}],"sources":{"../../../../lts/core/generated/Shaders/filter.fragment.ts":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"filterPixelShader\";\nconst shader = `varying vec2 vUV;\runiform sampler2D textureSampler;\runiform mat4 kernelMatrix;\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\rvec3 baseColor=texture2D(textureSampler,vUV).rgb;\rvec3 updatedColor=(kernelMatrix*vec4(baseColor,1.0)).rgb;\rgl_FragColor=vec4(updatedColor,1.0);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const filterPixelShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"429a15f7465c08b5d6b67ba2d49df20b","cacheData":{"env":{}}}