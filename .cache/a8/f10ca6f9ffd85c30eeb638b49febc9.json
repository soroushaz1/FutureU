{"id":"node_modules/@babylonjs/core/Shaders/fluidRenderingBilateralBlur.fragment.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\fluidRenderingBilateralBlur.fragment.js.map","includedInParent":true,"mtime":1704105649344},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\fluidRenderingBilateralBlur.fragment.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fluidRenderingBilateralBlurPixelShader = void 0;\nvar _shaderStore = require(\"../Engines/shaderStore.js\");\n// Do not edit.\n\nconst name = \"fluidRenderingBilateralBlurPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\nuniform int maxFilterSize;\nuniform vec2 blurDir;\nuniform float projectedParticleConstant;\nuniform float depthThreshold;\nvarying vec2 vUV;\nvoid main(void) {\nfloat depth=textureLod(textureSampler,vUV,0.).x;\nif (depth>=1e6 || depth<=0.) {\nglFragColor=vec4(vec3(depth),1.);\nreturn;\n}\nint filterSize=min(maxFilterSize,int(ceil(projectedParticleConstant/depth)));\nfloat sigma=float(filterSize)/3.0;\nfloat two_sigma2=2.0*sigma*sigma;\nfloat sigmaDepth=depthThreshold/3.0;\nfloat two_sigmaDepth2=2.0*sigmaDepth*sigmaDepth;\nfloat sum=0.;\nfloat wsum=0.;\nfloat sumVel=0.;\nfor (int x=-filterSize; x<=filterSize; ++x) {\nvec2 coords=vec2(x);\nvec2 sampleDepthVel=textureLod(textureSampler,vUV+coords*blurDir,0.).rg;\nfloat r=dot(coords,coords);\nfloat w=exp(-r/two_sigma2);\nfloat rDepth=sampleDepthVel.r-depth;\nfloat wd=exp(-rDepth*rDepth/two_sigmaDepth2);\nsum+=sampleDepthVel.r*w*wd;\nsumVel+=sampleDepthVel.g*w*wd;\nwsum+=w*wd;\n}\nglFragColor=vec4(sum/wsum,sumVel/wsum,0.,1.);\n}\n`;\n// Sideeffect\n_shaderStore.ShaderStore.ShadersStore[name] = shader;\n/** @internal */\nconst fluidRenderingBilateralBlurPixelShader = exports.fluidRenderingBilateralBlurPixelShader = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":10,"column":13}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":4,"column":53},"generated":{"line":10,"column":53}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":11,"column":15}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":38,"column":1},"generated":{"line":44,"column":1}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":40,"column":11},"generated":{"line":46,"column":24}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":40,"column":12},"generated":{"line":46,"column":25}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":40,"column":24},"generated":{"line":46,"column":37}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":40,"column":25},"generated":{"line":46,"column":38}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":40,"column":29},"generated":{"line":46,"column":42}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":40,"column":30},"generated":{"line":46,"column":43}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":40,"column":33},"generated":{"line":46,"column":46}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":40,"column":39},"generated":{"line":46,"column":52}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":41,"column":0},"generated":{"line":47,"column":0}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":7},"generated":{"line":48,"column":0}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":13},"generated":{"line":48,"column":6}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":51},"generated":{"line":48,"column":44}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":51},"generated":{"line":48,"column":47}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":51},"generated":{"line":48,"column":54}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":51},"generated":{"line":48,"column":55}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":51},"generated":{"line":48,"column":93}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":54},"generated":{"line":48,"column":96}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":56},"generated":{"line":49,"column":2}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":60},"generated":{"line":49,"column":6}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":62},"generated":{"line":50,"column":2}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":68},"generated":{"line":51,"column":0}},{"source":"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts","name":null,"original":{"line":42,"column":70},"generated":{"line":51,"column":1}}],"sources":{"../../../../lts/core/generated/Shaders/fluidRenderingBilateralBlur.fragment.ts":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"fluidRenderingBilateralBlurPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\runiform int maxFilterSize;\runiform vec2 blurDir;\runiform float projectedParticleConstant;\runiform float depthThreshold;\rvarying vec2 vUV;\rvoid main(void) {\rfloat depth=textureLod(textureSampler,vUV,0.).x;\rif (depth>=1e6 || depth<=0.) {\rglFragColor=vec4(vec3(depth),1.);\rreturn;\r}\rint filterSize=min(maxFilterSize,int(ceil(projectedParticleConstant/depth)));\rfloat sigma=float(filterSize)/3.0;\rfloat two_sigma2=2.0*sigma*sigma;\rfloat sigmaDepth=depthThreshold/3.0;\rfloat two_sigmaDepth2=2.0*sigmaDepth*sigmaDepth;\rfloat sum=0.;\rfloat wsum=0.;\rfloat sumVel=0.;\rfor (int x=-filterSize; x<=filterSize; ++x) {\rvec2 coords=vec2(x);\rvec2 sampleDepthVel=textureLod(textureSampler,vUV+coords*blurDir,0.).rg;\rfloat r=dot(coords,coords);\rfloat w=exp(-r/two_sigma2);\rfloat rDepth=sampleDepthVel.r-depth;\rfloat wd=exp(-rDepth*rDepth/two_sigmaDepth2);\rsum+=sampleDepthVel.r*w*wd;\rsumVel+=sampleDepthVel.g*w*wd;\rwsum+=w*wd;\r}\rglFragColor=vec4(sum/wsum,sumVel/wsum,0.,1.);\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluidRenderingBilateralBlurPixelShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"a230e1f6d49f83b4470f0ccbf2958f96","cacheData":{"env":{}}}