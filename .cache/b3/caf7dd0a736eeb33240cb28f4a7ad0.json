{"id":"node_modules/@babylonjs/core/Shaders/gpuRenderParticles.vertex.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js.map","includedInParent":true,"mtime":1704105649445},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"},{"name":"./ShadersInclude/clipPlaneVertexDeclaration2.js","loc":{"line":3,"column":7,"index":80},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\clipPlaneVertexDeclaration2.js"},{"name":"./ShadersInclude/logDepthDeclaration.js","loc":{"line":4,"column":7,"index":138},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\logDepthDeclaration.js"},{"name":"./ShadersInclude/clipPlaneVertex.js","loc":{"line":5,"column":7,"index":188},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\clipPlaneVertex.js"},{"name":"./ShadersInclude/logDepthVertex.js","loc":{"line":6,"column":7,"index":234},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\logDepthVertex.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gpuRenderParticlesVertexShader = void 0;\nvar _shaderStore = require(\"../Engines/shaderStore.js\");\nrequire(\"./ShadersInclude/clipPlaneVertexDeclaration2.js\");\nrequire(\"./ShadersInclude/logDepthDeclaration.js\");\nrequire(\"./ShadersInclude/clipPlaneVertex.js\");\nrequire(\"./ShadersInclude/logDepthVertex.js\");\n// Do not edit.\n\nconst name = \"gpuRenderParticlesVertexShader\";\nconst shader = `precision highp float;\nuniform mat4 view;\nuniform mat4 projection;\nuniform vec2 translationPivot;\nuniform vec3 worldOffset;\n#ifdef LOCAL\nuniform mat4 emitterWM;\n#endif\nattribute vec3 position;\nattribute float age;\nattribute float life;\nattribute vec3 size;\n#ifndef BILLBOARD\nattribute vec3 initialDirection;\n#endif\n#ifdef BILLBOARDSTRETCHED\nattribute vec3 direction;\n#endif\nattribute float angle;\n#ifdef ANIMATESHEET\nattribute float cellIndex;\n#endif\nattribute vec2 offset;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying vec4 vColor;\nvarying vec3 vPositionW;\n#if defined(BILLBOARD) && !defined(BILLBOARDY) && !defined(BILLBOARDSTRETCHED)\nuniform mat4 invView;\n#endif\n#include<clipPlaneVertexDeclaration2>\n#include<logDepthDeclaration>\n#ifdef COLORGRADIENTS\nuniform sampler2D colorGradientSampler;\n#else\nuniform vec4 colorDead;\nattribute vec4 color;\n#endif\n#ifdef ANIMATESHEET\nuniform vec3 sheetInfos;\n#endif\n#ifdef BILLBOARD\nuniform vec3 eyePosition;\n#endif\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\nvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\nvec3 zaxis=normalize(cross(yaxis,xaxis));\nvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\nvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\nvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\nmat3 rotMatrix= mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\n#ifdef LOCAL\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\n#else\nreturn (position+worldOffset)+alignedCorner;\n#endif\n}\n#ifdef BILLBOARDSTRETCHED\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\nvec3 normalizedToCamera=normalize(toCamera);\nvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\nvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\nvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\nvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\nvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\nmat3 rotMatrix= mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\n#ifdef LOCAL\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\n#else\nreturn (position+worldOffset)+alignedCorner;\n#endif\n}\n#endif\nvoid main() {\n#ifdef ANIMATESHEET\nfloat rowOffset=floor(cellIndex/sheetInfos.z);\nfloat columnOffset=cellIndex-rowOffset*sheetInfos.z;\nvec2 uvScale=sheetInfos.xy;\nvec2 uvOffset=vec2(uv.x ,1.0-uv.y);\nvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\n#else\nvUV=uv;\n#endif\nfloat ratio=age/life;\n#ifdef COLORGRADIENTS\nvColor=texture2D(colorGradientSampler,vec2(ratio,0));\n#else\nvColor=color*vec4(1.0-ratio)+colorDead*vec4(ratio);\n#endif\nvec2 cornerPos=(offset-translationPivot)*size.yz*size.x+translationPivot;\n#ifdef BILLBOARD\nvec4 rotatedCorner;\nrotatedCorner.w=0.;\n#ifdef BILLBOARDY\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.y=0.;\nvec3 yaxis=(position+worldOffset)-eyePosition;\nyaxis.y=0.;\nvPositionW=rotate(normalize(yaxis),rotatedCorner.xyz);\nvec4 viewPosition=(view*vec4(vPositionW,1.0));\n#elif defined(BILLBOARDSTRETCHED)\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\nvec3 toCamera=(position+worldOffset)-eyePosition;\nvPositionW=rotateAlign(toCamera,rotatedCorner.xyz);\nvec4 viewPosition=(view*vec4(vPositionW,1.0));\n#else\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\n#ifdef LOCAL\nvec4 viewPosition=view*vec4(((emitterWM*vec4(position,1.0)).xyz+worldOffset),1.0)+rotatedCorner;\n#else\nvec4 viewPosition=view*vec4((position+worldOffset),1.0)+rotatedCorner;\n#endif\nvPositionW=(invView*viewPosition).xyz;\n#endif\n#else\nvec3 rotatedCorner;\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=0.;\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nvec3 yaxis=normalize(initialDirection);\nvPositionW=rotate(yaxis,rotatedCorner);\nvec4 viewPosition=view*vec4(vPositionW,1.0);\n#endif\ngl_Position=projection*viewPosition;\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\nvec4 worldPos=vec4(vPositionW,1.0);\n#endif\n#include<clipPlaneVertex>\n#include<logDepthVertex>\n}`;\n// Sideeffect\n_shaderStore.ShaderStore.ShadersStore[name] = shader;\n/** @internal */\nconst gpuRenderParticlesVertexShader = exports.gpuRenderParticlesVertexShader = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":7}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":7}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":7}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":11,"column":7}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":8,"column":6},"generated":{"line":14,"column":6}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":8,"column":10},"generated":{"line":14,"column":10}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":8,"column":13},"generated":{"line":14,"column":13}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":8,"column":45},"generated":{"line":14,"column":45}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":9,"column":6},"generated":{"line":15,"column":6}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":9,"column":12},"generated":{"line":15,"column":12}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":9,"column":15},"generated":{"line":15,"column":15}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":145,"column":2},"generated":{"line":151,"column":2}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":146,"column":0},"generated":{"line":152,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":147,"column":0},"generated":{"line":153,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":147,"column":11},"generated":{"line":153,"column":24}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":147,"column":12},"generated":{"line":153,"column":25}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":147,"column":24},"generated":{"line":153,"column":37}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":153,"column":38}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":147,"column":29},"generated":{"line":153,"column":42}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":147,"column":30},"generated":{"line":153,"column":43}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":147,"column":33},"generated":{"line":153,"column":46}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":147,"column":39},"generated":{"line":153,"column":52}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":148,"column":0},"generated":{"line":154,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":7},"generated":{"line":155,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":13},"generated":{"line":155,"column":6}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":43},"generated":{"line":155,"column":36}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":43},"generated":{"line":155,"column":39}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":43},"generated":{"line":155,"column":46}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":43},"generated":{"line":155,"column":47}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":43},"generated":{"line":155,"column":77}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":46},"generated":{"line":155,"column":80}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":48},"generated":{"line":156,"column":2}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":52},"generated":{"line":156,"column":6}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":54},"generated":{"line":157,"column":2}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":60},"generated":{"line":158,"column":0}},{"source":"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":62},"generated":{"line":158,"column":1}}],"sources":{"../../../../lts/core/generated/Shaders/gpuRenderParticles.vertex.ts":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration2\";\nimport \"./ShadersInclude/logDepthDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertex\";\nimport \"./ShadersInclude/logDepthVertex\";\n\nconst name = \"gpuRenderParticlesVertexShader\";\nconst shader = `precision highp float;\runiform mat4 view;\runiform mat4 projection;\runiform vec2 translationPivot;\runiform vec3 worldOffset;\r#ifdef LOCAL\nuniform mat4 emitterWM;\r#endif\nattribute vec3 position;\rattribute float age;\rattribute float life;\rattribute vec3 size;\r#ifndef BILLBOARD\nattribute vec3 initialDirection;\r#endif\n#ifdef BILLBOARDSTRETCHED\nattribute vec3 direction;\r#endif\nattribute float angle;\r#ifdef ANIMATESHEET\nattribute float cellIndex;\r#endif\nattribute vec2 offset;\rattribute vec2 uv;\rvarying vec2 vUV;\rvarying vec4 vColor;\rvarying vec3 vPositionW;\r#if defined(BILLBOARD) && !defined(BILLBOARDY) && !defined(BILLBOARDSTRETCHED)\nuniform mat4 invView;\r#endif\n#include<clipPlaneVertexDeclaration2>\n#include<logDepthDeclaration>\n#ifdef COLORGRADIENTS\nuniform sampler2D colorGradientSampler;\r#else\nuniform vec4 colorDead;\rattribute vec4 color;\r#endif\n#ifdef ANIMATESHEET\nuniform vec3 sheetInfos;\r#endif\n#ifdef BILLBOARD\nuniform vec3 eyePosition;\r#endif\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\rvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\rvec3 zaxis=normalize(cross(yaxis,xaxis));\rvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\rvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\rvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\rmat3 rotMatrix= mat3(row0,row1,row2);\rvec3 alignedCorner=rotMatrix*rotatedCorner;\r#ifdef LOCAL\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\r#else\nreturn (position+worldOffset)+alignedCorner;\r#endif\n}\r#ifdef BILLBOARDSTRETCHED\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\rvec3 normalizedToCamera=normalize(toCamera);\rvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\rvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\rvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\rvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\rvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\rmat3 rotMatrix= mat3(row0,row1,row2);\rvec3 alignedCorner=rotMatrix*rotatedCorner;\r#ifdef LOCAL\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\r#else\nreturn (position+worldOffset)+alignedCorner;\r#endif\n}\r#endif\nvoid main() {\r#ifdef ANIMATESHEET\nfloat rowOffset=floor(cellIndex/sheetInfos.z);\rfloat columnOffset=cellIndex-rowOffset*sheetInfos.z;\rvec2 uvScale=sheetInfos.xy;\rvec2 uvOffset=vec2(uv.x ,1.0-uv.y);\rvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\r#else\nvUV=uv;\r#endif\nfloat ratio=age/life;\r#ifdef COLORGRADIENTS\nvColor=texture2D(colorGradientSampler,vec2(ratio,0));\r#else\nvColor=color*vec4(1.0-ratio)+colorDead*vec4(ratio);\r#endif\nvec2 cornerPos=(offset-translationPivot)*size.yz*size.x+translationPivot;\r#ifdef BILLBOARD\nvec4 rotatedCorner;\rrotatedCorner.w=0.;\r#ifdef BILLBOARDY\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\rrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\rrotatedCorner.y=0.;\rvec3 yaxis=(position+worldOffset)-eyePosition;\ryaxis.y=0.;\rvPositionW=rotate(normalize(yaxis),rotatedCorner.xyz);\rvec4 viewPosition=(view*vec4(vPositionW,1.0));\r#elif defined(BILLBOARDSTRETCHED)\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\rrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\rrotatedCorner.z=0.;\rvec3 toCamera=(position+worldOffset)-eyePosition;\rvPositionW=rotateAlign(toCamera,rotatedCorner.xyz);\rvec4 viewPosition=(view*vec4(vPositionW,1.0));\r#else\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\rrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\rrotatedCorner.z=0.;\r#ifdef LOCAL\nvec4 viewPosition=view*vec4(((emitterWM*vec4(position,1.0)).xyz+worldOffset),1.0)+rotatedCorner;\r#else\nvec4 viewPosition=view*vec4((position+worldOffset),1.0)+rotatedCorner;\r#endif\nvPositionW=(invView*viewPosition).xyz;\r#endif\n#else\nvec3 rotatedCorner;\rrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\rrotatedCorner.y=0.;\rrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\rvec3 yaxis=normalize(initialDirection);\rvPositionW=rotate(yaxis,rotatedCorner);\rvec4 viewPosition=view*vec4(vPositionW,1.0);\r#endif\ngl_Position=projection*viewPosition;\r#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\nvec4 worldPos=vec4(vPositionW,1.0);\r#endif\n#include<clipPlaneVertex>\n#include<logDepthVertex>\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const gpuRenderParticlesVertexShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"9ac146901dc4a0f733f0aeb8024972a1","cacheData":{"env":{}}}