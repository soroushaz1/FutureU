{"id":"node_modules/@babylonjs/core/Shaders/ShadersInclude/screenSpaceRayTrace.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\screenSpaceRayTrace.js.map","includedInParent":true,"mtime":1704105649902},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\screenSpaceRayTrace.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.screenSpaceRayTrace = void 0;\nvar _shaderStore = require(\"../../Engines/shaderStore.js\");\n// Do not edit.\n\nconst name = \"screenSpaceRayTrace\";\nconst shader = `float distanceSquared(vec2 a,vec2 b) { a-=b; return dot(a,a); }\n/**\n\\param csOrigin Camera-space ray origin,which must be \nwithin the view volume and must have z>0.01 and project within the valid screen rectangle\n\\param csDirection Unit length camera-space ray direction\n\\param projectToPixelMatrix A projection matrix that maps to **pixel** coordinates \n(**not** [-1,+1] normalized device coordinates).\n\\param csZBuffer The camera-space Z buffer\n\\param csZBufferSize Dimensions of csZBuffer\n\\param csZThickness Camera space csZThickness to ascribe to each pixel in the depth buffer\n\\param nearPlaneZ Positive number. Doesn't have to be THE actual near plane,just a reasonable value\nfor clipping rays headed towards the camera\n\\param stride Step in horizontal or vertical pixels between samples. This is a float\nbecause integer math is slow on GPUs,but should be set to an integer>=1\n\\param jitterFraction Number between 0 and 1 for how far to bump the ray in stride units\nto conceal banding artifacts,plus the stride ray offset.\n\\param maxSteps Maximum number of iterations. Higher gives better images but may be slow\n\\param maxRayTraceDistance Maximum camera-space distance to trace before returning a miss\n\\param selfCollisionNumSkip Number of steps to skip at start when raytracing to avoid self collisions.\n1 is a reasonable value,depending on the scene you may need to set this value to 2\n\\param hitPixel Pixel coordinates of the first intersection with the scene\n\\param numIterations number of iterations performed\n\\param csHitPoint Camera space location of the ray hit\n*/\n#define inline\nbool traceScreenSpaceRay1(\nvec3 csOrigin,\nvec3 csDirection,\nmat4 projectToPixelMatrix,\nsampler2D csZBuffer,\nvec2 csZBufferSize,\n#ifdef SSRAYTRACE_USE_BACK_DEPTHBUFFER\nsampler2D csZBackBuffer,\nfloat csZBackSizeFactor,\n#endif\nfloat csZThickness,\nfloat nearPlaneZ,\nfloat stride,\nfloat jitterFraction,\nfloat maxSteps,\nfloat maxRayTraceDistance,\nfloat selfCollisionNumSkip,\nout vec2 startPixel,\nout vec2 hitPixel,\nout vec3 csHitPoint,\nout float numIterations\n#ifdef SSRAYTRACE_DEBUG\n,out vec3 debugColor\n#endif\n)\n{\n#ifdef SSRAYTRACE_RIGHT_HANDED_SCENE\nfloat rayLength=(csOrigin.z+csDirection.z*maxRayTraceDistance)>-nearPlaneZ ? (-nearPlaneZ-csOrigin.z)/csDirection.z : maxRayTraceDistance;\n#else\nfloat rayLength=(csOrigin.z+csDirection.z*maxRayTraceDistance)<nearPlaneZ ? (nearPlaneZ-csOrigin.z)/csDirection.z : maxRayTraceDistance;\n#endif\nvec3 csEndPoint=csOrigin+csDirection*rayLength;\nhitPixel=vec2(-1.0,-1.0);\nvec4 H0=projectToPixelMatrix*vec4(csOrigin,1.0);\nvec4 H1=projectToPixelMatrix*vec4(csEndPoint,1.0);\nfloat k0=1.0/H0.w;\nfloat k1=1.0/H1.w;\nvec3 Q0=csOrigin*k0;\nvec3 Q1=csEndPoint*k1;\nvec2 P0=H0.xy*k0;\nvec2 P1=H1.xy*k1;\n#ifdef SSRAYTRACE_CLIP_TO_FRUSTUM\nfloat xMax=csZBufferSize.x-0.5,xMin=0.5,yMax=csZBufferSize.y-0.5,yMin=0.5;\nfloat alpha=0.0;\nif ((P1.y>yMax) || (P1.y<yMin)) {\nalpha=(P1.y-((P1.y>yMax) ? yMax : yMin))/(P1.y-P0.y);\n}\nif ((P1.x>xMax) || (P1.x<xMin)) {\nalpha=max(alpha,(P1.x-((P1.x>xMax) ? xMax : xMin))/(P1.x-P0.x));\n}\nP1=mix(P1,P0,alpha); k1=mix(k1,k0,alpha); Q1=mix(Q1,Q0,alpha);\n#endif\nP1+=vec2((distanceSquared(P0,P1)<0.0001) ? 0.01 : 0.0);\nvec2 delta=P1-P0;\nbool permute=false;\nif (abs(delta.x)<abs(delta.y)) { \npermute=true;\ndelta=delta.yx;\nP0=P0.yx;\nP1=P1.yx; \n}\nfloat stepDirection=sign(delta.x);\nfloat invdx=stepDirection/delta.x;\nvec2 dP=vec2(stepDirection,delta.y*invdx);\nvec3 dQ=(Q1-Q0)*invdx;\nfloat dk=(k1-k0)*invdx;\nfloat zMin=min(csEndPoint.z,csOrigin.z);\nfloat zMax=max(csEndPoint.z,csOrigin.z);\ndP*=stride; dQ*=stride; dk*=stride;\nP0+=dP*jitterFraction; Q0+=dQ*jitterFraction; k0+=dk*jitterFraction;\nvec4 pqk=vec4(P0,Q0.z,k0);\nvec4 dPQK=vec4(dP,dQ.z,dk);\nstartPixel=permute ? P0.yx : P0.xy;\nfloat prevZMaxEstimate=csOrigin.z;\nfloat rayZMin=prevZMaxEstimate,rayZMax=prevZMaxEstimate;\nfloat sceneZMax=rayZMax+1e4;\nfloat end=P1.x*stepDirection;\nbool hit=false;\nfloat stepCount;\nfor (stepCount=0.0;\nstepCount<=selfCollisionNumSkip ||\n(pqk.x*stepDirection)<=end &&\nstepCount<maxSteps &&\n!hit &&\nsceneZMax != 0.0; \npqk+=dPQK,++stepCount)\n{\nhitPixel=permute ? pqk.yx : pqk.xy;\nrayZMin=prevZMaxEstimate;\nrayZMax=(dPQK.z*0.5+pqk.z)/(dPQK.w*0.5+pqk.w);\nrayZMax=clamp(rayZMax,zMin,zMax);\nprevZMaxEstimate=rayZMax;\nif (rayZMin>rayZMax) { \nfloat t=rayZMin; rayZMin=rayZMax; rayZMax=t;\n}\nsceneZMax=texelFetch(csZBuffer,ivec2(hitPixel),0).r;\n#ifdef SSRAYTRACE_RIGHT_HANDED_SCENE\n#ifdef SSRAYTRACE_USE_BACK_DEPTHBUFFER\nfloat sceneBackZ=texelFetch(csZBackBuffer,ivec2(hitPixel/csZBackSizeFactor),0).r;\nhit=(rayZMax>=sceneBackZ-csZThickness) && (rayZMin<=sceneZMax);\n#else\nhit=(rayZMax>=sceneZMax-csZThickness) && (rayZMin<=sceneZMax);\n#endif\n#else\n#ifdef SSRAYTRACE_USE_BACK_DEPTHBUFFER\nfloat sceneBackZ=texelFetch(csZBackBuffer,ivec2(hitPixel/csZBackSizeFactor),0).r;\nhit=(rayZMin<=sceneBackZ+csZThickness) && (rayZMax>=sceneZMax) && (sceneZMax != 0.0);\n#else\nhit=(rayZMin<=sceneZMax+csZThickness) && (rayZMax>=sceneZMax);\n#endif\n#endif\n}\npqk-=dPQK;\nstepCount-=1.0;\nif (((pqk.x+dPQK.x)*stepDirection)>end || (stepCount+1.0)>=maxSteps || sceneZMax==0.0) {\nhit=false;\n}\n#ifdef SSRAYTRACE_ENABLE_REFINEMENT\nif (stride>1.0 && hit) {\npqk-=dPQK;\nstepCount-=1.0;\nfloat invStride=1.0/stride;\ndPQK*=invStride;\nfloat refinementStepCount=0.0;\nprevZMaxEstimate=pqk.z/pqk.w;\nrayZMax=prevZMaxEstimate;\nsceneZMax=rayZMax+1e7;\nfor (;\nrefinementStepCount<=1.0 ||\n(refinementStepCount<=stride*1.4) &&\n(rayZMax<sceneZMax) && (sceneZMax != 0.0);\npqk+=dPQK,refinementStepCount+=1.0)\n{\nrayZMin=prevZMaxEstimate;\nrayZMax=(dPQK.z*0.5+pqk.z)/(dPQK.w*0.5+pqk.w);\nrayZMax=clamp(rayZMax,zMin,zMax);\nprevZMaxEstimate=rayZMax;\nrayZMax=max(rayZMax,rayZMin);\nhitPixel=permute ? pqk.yx : pqk.xy;\nsceneZMax=texelFetch(csZBuffer,ivec2(hitPixel),0).r;\n}\npqk-=dPQK;\nrefinementStepCount-=1.0;\nstepCount+=refinementStepCount/stride;\n}\n#endif\nQ0.xy+=dQ.xy*stepCount;\nQ0.z=pqk.z;\ncsHitPoint=Q0/pqk.w;\nnumIterations=stepCount+1.0;\n#ifdef SSRAYTRACE_DEBUG\nif (((pqk.x+dPQK.x)*stepDirection)>end) {\ndebugColor=vec3(0,0,1);\n} else if ((stepCount+1.0)>=maxSteps) {\ndebugColor=vec3(1,0,0);\n} else if (sceneZMax==0.0) {\ndebugColor=vec3(1,1,0);\n} else {\ndebugColor=vec3(0,stepCount/maxSteps,0);\n}\n#endif\nreturn hit;\n}\n`;\n// Sideeffect\n_shaderStore.ShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nconst screenSpaceRayTrace = exports.screenSpaceRayTrace = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":10,"column":13}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":4,"column":34},"generated":{"line":10,"column":34}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":11,"column":15}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":193,"column":1},"generated":{"line":199,"column":1}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":194,"column":0},"generated":{"line":200,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":195,"column":0},"generated":{"line":201,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":195,"column":11},"generated":{"line":201,"column":24}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":195,"column":12},"generated":{"line":201,"column":25}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":195,"column":32},"generated":{"line":201,"column":45}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":195,"column":33},"generated":{"line":201,"column":46}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":195,"column":37},"generated":{"line":201,"column":50}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":195,"column":38},"generated":{"line":201,"column":51}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":195,"column":41},"generated":{"line":201,"column":54}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":195,"column":47},"generated":{"line":201,"column":60}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":196,"column":0},"generated":{"line":202,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":7},"generated":{"line":203,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":13},"generated":{"line":203,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":32},"generated":{"line":203,"column":25}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":32},"generated":{"line":203,"column":28}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":32},"generated":{"line":203,"column":35}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":32},"generated":{"line":203,"column":36}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":32},"generated":{"line":203,"column":55}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":35},"generated":{"line":203,"column":58}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":37},"generated":{"line":204,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":41},"generated":{"line":204,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":43},"generated":{"line":205,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":49},"generated":{"line":206,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts","name":null,"original":{"line":197,"column":51},"generated":{"line":206,"column":1}}],"sources":{"../../../../../lts/core/generated/Shaders/ShadersInclude/screenSpaceRayTrace.ts":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"screenSpaceRayTrace\";\nconst shader = `float distanceSquared(vec2 a,vec2 b) { a-=b; return dot(a,a); }\r/**\r\\param csOrigin Camera-space ray origin,which must be \rwithin the view volume and must have z>0.01 and project within the valid screen rectangle\r\\param csDirection Unit length camera-space ray direction\r\\param projectToPixelMatrix A projection matrix that maps to **pixel** coordinates \r(**not** [-1,+1] normalized device coordinates).\r\\param csZBuffer The camera-space Z buffer\r\\param csZBufferSize Dimensions of csZBuffer\r\\param csZThickness Camera space csZThickness to ascribe to each pixel in the depth buffer\r\\param nearPlaneZ Positive number. Doesn't have to be THE actual near plane,just a reasonable value\rfor clipping rays headed towards the camera\r\\param stride Step in horizontal or vertical pixels between samples. This is a float\rbecause integer math is slow on GPUs,but should be set to an integer>=1\r\\param jitterFraction Number between 0 and 1 for how far to bump the ray in stride units\rto conceal banding artifacts,plus the stride ray offset.\r\\param maxSteps Maximum number of iterations. Higher gives better images but may be slow\r\\param maxRayTraceDistance Maximum camera-space distance to trace before returning a miss\r\\param selfCollisionNumSkip Number of steps to skip at start when raytracing to avoid self collisions.\r1 is a reasonable value,depending on the scene you may need to set this value to 2\r\\param hitPixel Pixel coordinates of the first intersection with the scene\r\\param numIterations number of iterations performed\r\\param csHitPoint Camera space location of the ray hit\r*/\r#define inline\nbool traceScreenSpaceRay1(\rvec3 csOrigin,\rvec3 csDirection,\rmat4 projectToPixelMatrix,\rsampler2D csZBuffer,\rvec2 csZBufferSize,\r#ifdef SSRAYTRACE_USE_BACK_DEPTHBUFFER\nsampler2D csZBackBuffer,\rfloat csZBackSizeFactor,\r#endif\nfloat csZThickness,\rfloat nearPlaneZ,\rfloat stride,\rfloat jitterFraction,\rfloat maxSteps,\rfloat maxRayTraceDistance,\rfloat selfCollisionNumSkip,\rout vec2 startPixel,\rout vec2 hitPixel,\rout vec3 csHitPoint,\rout float numIterations\r#ifdef SSRAYTRACE_DEBUG\n,out vec3 debugColor\r#endif\n)\r{\r#ifdef SSRAYTRACE_RIGHT_HANDED_SCENE\nfloat rayLength=(csOrigin.z+csDirection.z*maxRayTraceDistance)>-nearPlaneZ ? (-nearPlaneZ-csOrigin.z)/csDirection.z : maxRayTraceDistance;\r#else\nfloat rayLength=(csOrigin.z+csDirection.z*maxRayTraceDistance)<nearPlaneZ ? (nearPlaneZ-csOrigin.z)/csDirection.z : maxRayTraceDistance;\r#endif\nvec3 csEndPoint=csOrigin+csDirection*rayLength;\rhitPixel=vec2(-1.0,-1.0);\rvec4 H0=projectToPixelMatrix*vec4(csOrigin,1.0);\rvec4 H1=projectToPixelMatrix*vec4(csEndPoint,1.0);\rfloat k0=1.0/H0.w;\rfloat k1=1.0/H1.w;\rvec3 Q0=csOrigin*k0;\rvec3 Q1=csEndPoint*k1;\rvec2 P0=H0.xy*k0;\rvec2 P1=H1.xy*k1;\r#ifdef SSRAYTRACE_CLIP_TO_FRUSTUM\nfloat xMax=csZBufferSize.x-0.5,xMin=0.5,yMax=csZBufferSize.y-0.5,yMin=0.5;\rfloat alpha=0.0;\rif ((P1.y>yMax) || (P1.y<yMin)) {\ralpha=(P1.y-((P1.y>yMax) ? yMax : yMin))/(P1.y-P0.y);\r}\rif ((P1.x>xMax) || (P1.x<xMin)) {\ralpha=max(alpha,(P1.x-((P1.x>xMax) ? xMax : xMin))/(P1.x-P0.x));\r}\rP1=mix(P1,P0,alpha); k1=mix(k1,k0,alpha); Q1=mix(Q1,Q0,alpha);\r#endif\nP1+=vec2((distanceSquared(P0,P1)<0.0001) ? 0.01 : 0.0);\rvec2 delta=P1-P0;\rbool permute=false;\rif (abs(delta.x)<abs(delta.y)) { \rpermute=true;\rdelta=delta.yx;\rP0=P0.yx;\rP1=P1.yx; \r}\rfloat stepDirection=sign(delta.x);\rfloat invdx=stepDirection/delta.x;\rvec2 dP=vec2(stepDirection,delta.y*invdx);\rvec3 dQ=(Q1-Q0)*invdx;\rfloat dk=(k1-k0)*invdx;\rfloat zMin=min(csEndPoint.z,csOrigin.z);\rfloat zMax=max(csEndPoint.z,csOrigin.z);\rdP*=stride; dQ*=stride; dk*=stride;\rP0+=dP*jitterFraction; Q0+=dQ*jitterFraction; k0+=dk*jitterFraction;\rvec4 pqk=vec4(P0,Q0.z,k0);\rvec4 dPQK=vec4(dP,dQ.z,dk);\rstartPixel=permute ? P0.yx : P0.xy;\rfloat prevZMaxEstimate=csOrigin.z;\rfloat rayZMin=prevZMaxEstimate,rayZMax=prevZMaxEstimate;\rfloat sceneZMax=rayZMax+1e4;\rfloat end=P1.x*stepDirection;\rbool hit=false;\rfloat stepCount;\rfor (stepCount=0.0;\rstepCount<=selfCollisionNumSkip ||\r(pqk.x*stepDirection)<=end &&\rstepCount<maxSteps &&\r!hit &&\rsceneZMax != 0.0; \rpqk+=dPQK,++stepCount)\r{\rhitPixel=permute ? pqk.yx : pqk.xy;\rrayZMin=prevZMaxEstimate;\rrayZMax=(dPQK.z*0.5+pqk.z)/(dPQK.w*0.5+pqk.w);\rrayZMax=clamp(rayZMax,zMin,zMax);\rprevZMaxEstimate=rayZMax;\rif (rayZMin>rayZMax) { \rfloat t=rayZMin; rayZMin=rayZMax; rayZMax=t;\r}\rsceneZMax=texelFetch(csZBuffer,ivec2(hitPixel),0).r;\r#ifdef SSRAYTRACE_RIGHT_HANDED_SCENE\n#ifdef SSRAYTRACE_USE_BACK_DEPTHBUFFER\nfloat sceneBackZ=texelFetch(csZBackBuffer,ivec2(hitPixel/csZBackSizeFactor),0).r;\rhit=(rayZMax>=sceneBackZ-csZThickness) && (rayZMin<=sceneZMax);\r#else\nhit=(rayZMax>=sceneZMax-csZThickness) && (rayZMin<=sceneZMax);\r#endif\n#else\n#ifdef SSRAYTRACE_USE_BACK_DEPTHBUFFER\nfloat sceneBackZ=texelFetch(csZBackBuffer,ivec2(hitPixel/csZBackSizeFactor),0).r;\rhit=(rayZMin<=sceneBackZ+csZThickness) && (rayZMax>=sceneZMax) && (sceneZMax != 0.0);\r#else\nhit=(rayZMin<=sceneZMax+csZThickness) && (rayZMax>=sceneZMax);\r#endif\n#endif\n}\rpqk-=dPQK;\rstepCount-=1.0;\rif (((pqk.x+dPQK.x)*stepDirection)>end || (stepCount+1.0)>=maxSteps || sceneZMax==0.0) {\rhit=false;\r}\r#ifdef SSRAYTRACE_ENABLE_REFINEMENT\nif (stride>1.0 && hit) {\rpqk-=dPQK;\rstepCount-=1.0;\rfloat invStride=1.0/stride;\rdPQK*=invStride;\rfloat refinementStepCount=0.0;\rprevZMaxEstimate=pqk.z/pqk.w;\rrayZMax=prevZMaxEstimate;\rsceneZMax=rayZMax+1e7;\rfor (;\rrefinementStepCount<=1.0 ||\r(refinementStepCount<=stride*1.4) &&\r(rayZMax<sceneZMax) && (sceneZMax != 0.0);\rpqk+=dPQK,refinementStepCount+=1.0)\r{\rrayZMin=prevZMaxEstimate;\rrayZMax=(dPQK.z*0.5+pqk.z)/(dPQK.w*0.5+pqk.w);\rrayZMax=clamp(rayZMax,zMin,zMax);\rprevZMaxEstimate=rayZMax;\rrayZMax=max(rayZMax,rayZMin);\rhitPixel=permute ? pqk.yx : pqk.xy;\rsceneZMax=texelFetch(csZBuffer,ivec2(hitPixel),0).r;\r}\rpqk-=dPQK;\rrefinementStepCount-=1.0;\rstepCount+=refinementStepCount/stride;\r}\r#endif\nQ0.xy+=dQ.xy*stepCount;\rQ0.z=pqk.z;\rcsHitPoint=Q0/pqk.w;\rnumIterations=stepCount+1.0;\r#ifdef SSRAYTRACE_DEBUG\nif (((pqk.x+dPQK.x)*stepDirection)>end) {\rdebugColor=vec3(0,0,1);\r} else if ((stepCount+1.0)>=maxSteps) {\rdebugColor=vec3(1,0,0);\r} else if (sceneZMax==0.0) {\rdebugColor=vec3(1,1,0);\r} else {\rdebugColor=vec3(0,stepCount/maxSteps,0);\r}\r#endif\nreturn hit;\r}\r`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const screenSpaceRayTrace = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"4bba824f8056a88dcc8806b0a9dbd72d","cacheData":{"env":{}}}