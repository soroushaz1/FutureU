{"id":"node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingFunctions.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\imageProcessingFunctions.js.map","includedInParent":true,"mtime":1704105649496},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\imageProcessingFunctions.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.imageProcessingFunctions = void 0;\nvar _shaderStore = require(\"../../Engines/shaderStore.js\");\n// Do not edit.\n\nconst name = \"imageProcessingFunctions\";\nconst shader = `#if defined(COLORGRADING) && !defined(COLORGRADING3D)\n/** \n* Polyfill for SAMPLE_TEXTURE_3D,which is unsupported in WebGL.\n* sampler3dSetting.x=textureOffset (0.5/textureSize).\n* sampler3dSetting.y=textureSize.\n*/\n#define inline\nvec3 sampleTexture3D(sampler2D colorTransform,vec3 color,vec2 sampler3dSetting)\n{\nfloat sliceSize=2.0*sampler3dSetting.x; \n#ifdef SAMPLER3DGREENDEPTH\nfloat sliceContinuous=(color.g-sampler3dSetting.x)*sampler3dSetting.y;\n#else\nfloat sliceContinuous=(color.b-sampler3dSetting.x)*sampler3dSetting.y;\n#endif\nfloat sliceInteger=floor(sliceContinuous);\nfloat sliceFraction=sliceContinuous-sliceInteger;\n#ifdef SAMPLER3DGREENDEPTH\nvec2 sliceUV=color.rb;\n#else\nvec2 sliceUV=color.rg;\n#endif\nsliceUV.x*=sliceSize;\nsliceUV.x+=sliceInteger*sliceSize;\nsliceUV=saturate(sliceUV);\nvec4 slice0Color=texture2D(colorTransform,sliceUV);\nsliceUV.x+=sliceSize;\nsliceUV=saturate(sliceUV);\nvec4 slice1Color=texture2D(colorTransform,sliceUV);\nvec3 result=mix(slice0Color.rgb,slice1Color.rgb,sliceFraction);\n#ifdef SAMPLER3DBGRMAP\ncolor.rgb=result.rgb;\n#else\ncolor.rgb=result.bgr;\n#endif\nreturn color;\n}\n#endif\n#ifdef TONEMAPPING_ACES\nconst mat3 ACESInputMat=mat3(\nvec3(0.59719,0.07600,0.02840),\nvec3(0.35458,0.90834,0.13383),\nvec3(0.04823,0.01566,0.83777)\n);\nconst mat3 ACESOutputMat=mat3(\nvec3( 1.60475,-0.10208,-0.00327),\nvec3(-0.53108, 1.10813,-0.07276),\nvec3(-0.07367,-0.00605, 1.07602)\n);\nvec3 RRTAndODTFit(vec3 v)\n{\nvec3 a=v*(v+0.0245786)-0.000090537;\nvec3 b=v*(0.983729*v+0.4329510)+0.238081;\nreturn a/b;\n}\nvec3 ACESFitted(vec3 color)\n{\ncolor=ACESInputMat*color;\ncolor=RRTAndODTFit(color);\ncolor=ACESOutputMat*color;\ncolor=saturate(color);\nreturn color;\n}\n#endif\n#define CUSTOM_IMAGEPROCESSINGFUNCTIONS_DEFINITIONS\nvec4 applyImageProcessing(vec4 result) {\n#define CUSTOM_IMAGEPROCESSINGFUNCTIONS_UPDATERESULT_ATSTART\n#ifdef EXPOSURE\nresult.rgb*=exposureLinear;\n#endif\n#ifdef VIGNETTE\nvec2 viewportXY=gl_FragCoord.xy*vInverseScreenSize;\nviewportXY=viewportXY*2.0-1.0;\nvec3 vignetteXY1=vec3(viewportXY*vignetteSettings1.xy+vignetteSettings1.zw,1.0);\nfloat vignetteTerm=dot(vignetteXY1,vignetteXY1);\nfloat vignette=pow(vignetteTerm,vignetteSettings2.w);\nvec3 vignetteColor=vignetteSettings2.rgb;\n#ifdef VIGNETTEBLENDMODEMULTIPLY\nvec3 vignetteColorMultiplier=mix(vignetteColor,vec3(1,1,1),vignette);\nresult.rgb*=vignetteColorMultiplier;\n#endif\n#ifdef VIGNETTEBLENDMODEOPAQUE\nresult.rgb=mix(vignetteColor,result.rgb,vignette);\n#endif\n#endif\n#ifdef TONEMAPPING\n#ifdef TONEMAPPING_ACES\nresult.rgb=ACESFitted(result.rgb);\n#else\nconst float tonemappingCalibration=1.590579;\nresult.rgb=1.0-exp2(-tonemappingCalibration*result.rgb);\n#endif\n#endif\nresult.rgb=toGammaSpace(result.rgb);\nresult.rgb=saturate(result.rgb);\n#ifdef CONTRAST\nvec3 resultHighContrast=result.rgb*result.rgb*(3.0-2.0*result.rgb);\nif (contrast<1.0) {\nresult.rgb=mix(vec3(0.5,0.5,0.5),result.rgb,contrast);\n} else {\nresult.rgb=mix(result.rgb,resultHighContrast,contrast-1.0);\n}\n#endif\n#ifdef COLORGRADING\nvec3 colorTransformInput=result.rgb*colorTransformSettings.xxx+colorTransformSettings.yyy;\n#ifdef COLORGRADING3D\nvec3 colorTransformOutput=texture(txColorTransform,colorTransformInput).rgb;\n#else\nvec3 colorTransformOutput=sampleTexture3D(txColorTransform,colorTransformInput,colorTransformSettings.yz).rgb;\n#endif\nresult.rgb=mix(result.rgb,colorTransformOutput,colorTransformSettings.www);\n#endif\n#ifdef COLORCURVES\nfloat luma=getLuminance(result.rgb);\nvec2 curveMix=clamp(vec2(luma*3.0-1.5,luma*-3.0+1.5),vec2(0.0),vec2(1.0));\nvec4 colorCurve=vCameraColorCurveNeutral+curveMix.x*vCameraColorCurvePositive-curveMix.y*vCameraColorCurveNegative;\nresult.rgb*=colorCurve.rgb;\nresult.rgb=mix(vec3(luma),result.rgb,colorCurve.a);\n#endif\n#ifdef DITHER\nfloat rand=getRand(gl_FragCoord.xy*vInverseScreenSize);\nfloat dither=mix(-ditherIntensity,ditherIntensity,rand);\nresult.rgb=saturate(result.rgb+vec3(dither));\n#endif\n#define CUSTOM_IMAGEPROCESSINGFUNCTIONS_UPDATERESULT_ATEND\nreturn result;\n}`;\n// Sideeffect\n_shaderStore.ShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nconst imageProcessingFunctions = exports.imageProcessingFunctions = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":10,"column":13}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":39},"generated":{"line":10,"column":39}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":11,"column":15}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":131,"column":2},"generated":{"line":137,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":132,"column":0},"generated":{"line":138,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":133,"column":0},"generated":{"line":139,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":133,"column":11},"generated":{"line":139,"column":24}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":133,"column":12},"generated":{"line":139,"column":25}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":133,"column":32},"generated":{"line":139,"column":45}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":133,"column":33},"generated":{"line":139,"column":46}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":133,"column":37},"generated":{"line":139,"column":50}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":133,"column":38},"generated":{"line":139,"column":51}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":133,"column":41},"generated":{"line":139,"column":54}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":133,"column":47},"generated":{"line":139,"column":60}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":134,"column":0},"generated":{"line":140,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":7},"generated":{"line":141,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":13},"generated":{"line":141,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":37},"generated":{"line":141,"column":30}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":37},"generated":{"line":141,"column":33}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":37},"generated":{"line":141,"column":40}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":37},"generated":{"line":141,"column":41}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":37},"generated":{"line":141,"column":65}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":40},"generated":{"line":141,"column":68}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":42},"generated":{"line":142,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":46},"generated":{"line":142,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":48},"generated":{"line":143,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":54},"generated":{"line":144,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":135,"column":56},"generated":{"line":144,"column":1}}],"sources":{"../../../../../lts/core/generated/Shaders/ShadersInclude/imageProcessingFunctions.ts":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"imageProcessingFunctions\";\nconst shader = `#if defined(COLORGRADING) && !defined(COLORGRADING3D)\n/** \r* Polyfill for SAMPLE_TEXTURE_3D,which is unsupported in WebGL.\r* sampler3dSetting.x=textureOffset (0.5/textureSize).\r* sampler3dSetting.y=textureSize.\r*/\r#define inline\nvec3 sampleTexture3D(sampler2D colorTransform,vec3 color,vec2 sampler3dSetting)\r{\rfloat sliceSize=2.0*sampler3dSetting.x; \r#ifdef SAMPLER3DGREENDEPTH\nfloat sliceContinuous=(color.g-sampler3dSetting.x)*sampler3dSetting.y;\r#else\nfloat sliceContinuous=(color.b-sampler3dSetting.x)*sampler3dSetting.y;\r#endif\nfloat sliceInteger=floor(sliceContinuous);\rfloat sliceFraction=sliceContinuous-sliceInteger;\r#ifdef SAMPLER3DGREENDEPTH\nvec2 sliceUV=color.rb;\r#else\nvec2 sliceUV=color.rg;\r#endif\nsliceUV.x*=sliceSize;\rsliceUV.x+=sliceInteger*sliceSize;\rsliceUV=saturate(sliceUV);\rvec4 slice0Color=texture2D(colorTransform,sliceUV);\rsliceUV.x+=sliceSize;\rsliceUV=saturate(sliceUV);\rvec4 slice1Color=texture2D(colorTransform,sliceUV);\rvec3 result=mix(slice0Color.rgb,slice1Color.rgb,sliceFraction);\r#ifdef SAMPLER3DBGRMAP\ncolor.rgb=result.rgb;\r#else\ncolor.rgb=result.bgr;\r#endif\nreturn color;\r}\r#endif\n#ifdef TONEMAPPING_ACES\nconst mat3 ACESInputMat=mat3(\rvec3(0.59719,0.07600,0.02840),\rvec3(0.35458,0.90834,0.13383),\rvec3(0.04823,0.01566,0.83777)\r);\rconst mat3 ACESOutputMat=mat3(\rvec3( 1.60475,-0.10208,-0.00327),\rvec3(-0.53108, 1.10813,-0.07276),\rvec3(-0.07367,-0.00605, 1.07602)\r);\rvec3 RRTAndODTFit(vec3 v)\r{\rvec3 a=v*(v+0.0245786)-0.000090537;\rvec3 b=v*(0.983729*v+0.4329510)+0.238081;\rreturn a/b;\r}\rvec3 ACESFitted(vec3 color)\r{\rcolor=ACESInputMat*color;\rcolor=RRTAndODTFit(color);\rcolor=ACESOutputMat*color;\rcolor=saturate(color);\rreturn color;\r}\r#endif\n#define CUSTOM_IMAGEPROCESSINGFUNCTIONS_DEFINITIONS\nvec4 applyImageProcessing(vec4 result) {\r#define CUSTOM_IMAGEPROCESSINGFUNCTIONS_UPDATERESULT_ATSTART\n#ifdef EXPOSURE\nresult.rgb*=exposureLinear;\r#endif\n#ifdef VIGNETTE\nvec2 viewportXY=gl_FragCoord.xy*vInverseScreenSize;\rviewportXY=viewportXY*2.0-1.0;\rvec3 vignetteXY1=vec3(viewportXY*vignetteSettings1.xy+vignetteSettings1.zw,1.0);\rfloat vignetteTerm=dot(vignetteXY1,vignetteXY1);\rfloat vignette=pow(vignetteTerm,vignetteSettings2.w);\rvec3 vignetteColor=vignetteSettings2.rgb;\r#ifdef VIGNETTEBLENDMODEMULTIPLY\nvec3 vignetteColorMultiplier=mix(vignetteColor,vec3(1,1,1),vignette);\rresult.rgb*=vignetteColorMultiplier;\r#endif\n#ifdef VIGNETTEBLENDMODEOPAQUE\nresult.rgb=mix(vignetteColor,result.rgb,vignette);\r#endif\n#endif\n#ifdef TONEMAPPING\n#ifdef TONEMAPPING_ACES\nresult.rgb=ACESFitted(result.rgb);\r#else\nconst float tonemappingCalibration=1.590579;\rresult.rgb=1.0-exp2(-tonemappingCalibration*result.rgb);\r#endif\n#endif\nresult.rgb=toGammaSpace(result.rgb);\rresult.rgb=saturate(result.rgb);\r#ifdef CONTRAST\nvec3 resultHighContrast=result.rgb*result.rgb*(3.0-2.0*result.rgb);\rif (contrast<1.0) {\rresult.rgb=mix(vec3(0.5,0.5,0.5),result.rgb,contrast);\r} else {\rresult.rgb=mix(result.rgb,resultHighContrast,contrast-1.0);\r}\r#endif\n#ifdef COLORGRADING\nvec3 colorTransformInput=result.rgb*colorTransformSettings.xxx+colorTransformSettings.yyy;\r#ifdef COLORGRADING3D\nvec3 colorTransformOutput=texture(txColorTransform,colorTransformInput).rgb;\r#else\nvec3 colorTransformOutput=sampleTexture3D(txColorTransform,colorTransformInput,colorTransformSettings.yz).rgb;\r#endif\nresult.rgb=mix(result.rgb,colorTransformOutput,colorTransformSettings.www);\r#endif\n#ifdef COLORCURVES\nfloat luma=getLuminance(result.rgb);\rvec2 curveMix=clamp(vec2(luma*3.0-1.5,luma*-3.0+1.5),vec2(0.0),vec2(1.0));\rvec4 colorCurve=vCameraColorCurveNeutral+curveMix.x*vCameraColorCurvePositive-curveMix.y*vCameraColorCurveNegative;\rresult.rgb*=colorCurve.rgb;\rresult.rgb=mix(vec3(luma),result.rgb,colorCurve.a);\r#endif\n#ifdef DITHER\nfloat rand=getRand(gl_FragCoord.xy*vInverseScreenSize);\rfloat dither=mix(-ditherIntensity,ditherIntensity,rand);\rresult.rgb=saturate(result.rgb+vec3(dither));\r#endif\n#define CUSTOM_IMAGEPROCESSINGFUNCTIONS_UPDATERESULT_ATEND\nreturn result;\r}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const imageProcessingFunctions = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"df0f8a290778523d25b733282387d4e8","cacheData":{"env":{}}}