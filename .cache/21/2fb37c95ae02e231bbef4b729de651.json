{"id":"node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrIBLFunctions.js","dependencies":[{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\pbrIBLFunctions.js.map","includedInParent":true,"mtime":1704105649777},{"name":"F:\\FutureU\\babylonjs\\package.json","includedInParent":true,"mtime":1704105536080},{"name":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":1704105648327},{"name":"../../Engines/shaderStore.js","loc":{"line":2,"column":28,"index":44},"parent":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\pbrIBLFunctions.js","resolved":"F:\\FutureU\\babylonjs\\node_modules\\@babylonjs\\core\\Engines\\shaderStore.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pbrIBLFunctions = void 0;\nvar _shaderStore = require(\"../../Engines/shaderStore.js\");\n// Do not edit.\n\nconst name = \"pbrIBLFunctions\";\nconst shader = `#if defined(REFLECTION) || defined(SS_REFRACTION)\nfloat getLodFromAlphaG(float cubeMapDimensionPixels,float microsurfaceAverageSlope) {\nfloat microsurfaceAverageSlopeTexels=cubeMapDimensionPixels*microsurfaceAverageSlope;\nfloat lod=log2(microsurfaceAverageSlopeTexels);\nreturn lod;\n}\nfloat getLinearLodFromRoughness(float cubeMapDimensionPixels,float roughness) {\nfloat lod=log2(cubeMapDimensionPixels)*roughness;\nreturn lod;\n}\n#endif\n#if defined(ENVIRONMENTBRDF) && defined(RADIANCEOCCLUSION)\nfloat environmentRadianceOcclusion(float ambientOcclusion,float NdotVUnclamped) {\nfloat temp=NdotVUnclamped+ambientOcclusion;\nreturn saturate(square(temp)-1.0+ambientOcclusion);\n}\n#endif\n#if defined(ENVIRONMENTBRDF) && defined(HORIZONOCCLUSION)\nfloat environmentHorizonOcclusion(vec3 view,vec3 normal,vec3 geometricNormal) {\nvec3 reflection=reflect(view,normal);\nfloat temp=saturate(1.0+1.1*dot(reflection,geometricNormal));\nreturn square(temp);\n}\n#endif\n#if defined(LODINREFLECTIONALPHA) || defined(SS_LODINREFRACTIONALPHA)\n#define UNPACK_LOD(x) (1.0-x)*255.0\nfloat getLodFromAlphaG(float cubeMapDimensionPixels,float alphaG,float NdotV) {\nfloat microsurfaceAverageSlope=alphaG;\nmicrosurfaceAverageSlope*=sqrt(abs(NdotV));\nreturn getLodFromAlphaG(cubeMapDimensionPixels,microsurfaceAverageSlope);\n}\n#endif\n`;\n// Sideeffect\n_shaderStore.ShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nconst pbrIBLFunctions = exports.pbrIBLFunctions = {\n  name,\n  shader\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":16}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":19}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":7,"column":26}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":10,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":10,"column":13}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":4,"column":30},"generated":{"line":10,"column":30}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":11,"column":15}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":43,"column":1}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":38,"column":0},"generated":{"line":44,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":39,"column":11},"generated":{"line":45,"column":24}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":39,"column":12},"generated":{"line":45,"column":25}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":39,"column":32},"generated":{"line":45,"column":45}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":39,"column":33},"generated":{"line":45,"column":46}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":39,"column":37},"generated":{"line":45,"column":50}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":39,"column":38},"generated":{"line":45,"column":51}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":39,"column":41},"generated":{"line":45,"column":54}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":39,"column":47},"generated":{"line":45,"column":60}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":7},"generated":{"line":47,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":13},"generated":{"line":47,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":28},"generated":{"line":47,"column":21}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":28},"generated":{"line":47,"column":24}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":28},"generated":{"line":47,"column":31}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":28},"generated":{"line":47,"column":32}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":28},"generated":{"line":47,"column":47}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":31},"generated":{"line":47,"column":50}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":33},"generated":{"line":48,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":37},"generated":{"line":48,"column":6}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":39},"generated":{"line":49,"column":2}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":45},"generated":{"line":50,"column":0}},{"source":"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts","name":null,"original":{"line":41,"column":47},"generated":{"line":50,"column":1}}],"sources":{"../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"pbrIBLFunctions\";\nconst shader = `#if defined(REFLECTION) || defined(SS_REFRACTION)\nfloat getLodFromAlphaG(float cubeMapDimensionPixels,float microsurfaceAverageSlope) {\rfloat microsurfaceAverageSlopeTexels=cubeMapDimensionPixels*microsurfaceAverageSlope;\rfloat lod=log2(microsurfaceAverageSlopeTexels);\rreturn lod;\r}\rfloat getLinearLodFromRoughness(float cubeMapDimensionPixels,float roughness) {\rfloat lod=log2(cubeMapDimensionPixels)*roughness;\rreturn lod;\r}\r#endif\n#if defined(ENVIRONMENTBRDF) && defined(RADIANCEOCCLUSION)\nfloat environmentRadianceOcclusion(float ambientOcclusion,float NdotVUnclamped) {\rfloat temp=NdotVUnclamped+ambientOcclusion;\rreturn saturate(square(temp)-1.0+ambientOcclusion);\r}\r#endif\n#if defined(ENVIRONMENTBRDF) && defined(HORIZONOCCLUSION)\nfloat environmentHorizonOcclusion(vec3 view,vec3 normal,vec3 geometricNormal) {\rvec3 reflection=reflect(view,normal);\rfloat temp=saturate(1.0+1.1*dot(reflection,geometricNormal));\rreturn square(temp);\r}\r#endif\n#if defined(LODINREFLECTIONALPHA) || defined(SS_LODINREFRACTIONALPHA)\n#define UNPACK_LOD(x) (1.0-x)*255.0\nfloat getLodFromAlphaG(float cubeMapDimensionPixels,float alphaG,float NdotV) {\rfloat microsurfaceAverageSlope=alphaG;\rmicrosurfaceAverageSlope*=sqrt(abs(NdotV));\rreturn getLodFromAlphaG(cubeMapDimensionPixels,microsurfaceAverageSlope);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const pbrIBLFunctions = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"24d7a17ed47d9d594e0383a639bd616a","cacheData":{"env":{}}}